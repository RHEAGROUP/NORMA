#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
* Copyright © ORM Solutions, LLC. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass Hierarchy
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.Hierarchy.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.Hierarchy.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e276f940-1082-4526-89f8-4ca88374121a")]
	public partial class Hierarchy : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Hierarchy domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe276f940, 0x1082, 0x4526, 0x89, 0xf8, 0x4c, 0xa8, 0x83, 0x74, 0x12, 0x1a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Hierarchy(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Hierarchy(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for unibz.ORMInferenceEngine.HierarchyIsForORMModel.Hierarchy
		/// </summary>
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::unibz.ORMInferenceEngine.HierarchyIsForORMModel.HierarchyDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::unibz.ORMInferenceEngine.HierarchyIsForORMModel.ORMModelDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::unibz.ORMInferenceEngine.HierarchyIsForORMModel.ORMModelDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::unibz.ORMInferenceEngine.HierarchyIsForORMModel.HierarchyDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass UnsatisfiableDomain
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.UnsatisfiableDomain.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.UnsatisfiableDomain.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f65dd9e9-770b-4a9c-b041-795a8decb9a9")]
	public partial class UnsatisfiableDomain : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UnsatisfiableDomain domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf65dd9e9, 0x770b, 0x4a9c, 0xb0, 0x41, 0x79, 0x5a, 0x8d, 0xec, 0xb9, 0xa9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnsatisfiableDomain(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnsatisfiableDomain(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel.UnsatisfiableDomain
		/// </summary>
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel.UnsatisfiableDomainDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel.ORMModelDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel.ORMModelDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel.UnsatisfiableDomainDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass InferenceResult
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferenceResult.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferenceResult.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8b15c2b7-6e85-4d80-a2cb-17c522d93315")]
	public partial class InferenceResult : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InferenceResult domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8b15c2b7, 0x6e85, 0x4d80, 0xa2, 0xcb, 0x17, 0xc5, 0x22, 0xd9, 0x33, 0x15);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferenceResult(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferenceResult(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsProcessed domain property code
		
		/// <summary>
		/// IsProcessed domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsProcessedDomainPropertyId = new global::System.Guid(0x27d2e4ba, 0xa8e9, 0x48e3, 0xaf, 0xb8, 0xe7, 0x69, 0x24, 0xdd, 0xb1, 0x4c);
		
		/// <summary>
		/// Storage for IsProcessed
		/// </summary>
		private global::System.Boolean isProcessedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsProcessed domain property.
		/// Is it already processed?
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferenceResult/IsProcessed.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferenceResult/IsProcessed.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("27d2e4ba-a8e9-48e3-afb8-e76924ddb14c")]
		public global::System.Boolean IsProcessed
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isProcessedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsProcessedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InferenceResult.IsProcessed domain property.
		/// </summary>
		internal sealed partial class IsProcessedPropertyHandler : DslModeling::DomainPropertyValueHandler<InferenceResult, global::System.Boolean>
		{
			private IsProcessedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InferenceResult.IsProcessed domain property value handler.
			/// </summary>
			public static readonly IsProcessedPropertyHandler Instance = new IsProcessedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InferenceResult.IsProcessed domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsProcessedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(InferenceResult element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isProcessedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InferenceResult element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isProcessedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// unibz.ORMInferenceEngine.InferenceResultTargetsORMModel.InferenceResult
		/// </summary>
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel.InferenceResultDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel.InferenceResultDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass InferredUnsatisfiableDomain
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredUnsatisfiableDomain.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredUnsatisfiableDomain.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3fa70fa8-022e-4bc1-b63d-503e8e9df582")]
	public sealed partial class InferredUnsatisfiableDomain : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InferredUnsatisfiableDomain domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3fa70fa8, 0x022e, 0x4bc1, 0xb6, 0x3d, 0x50, 0x3e, 0x8e, 0x9d, 0xf5, 0x82);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredUnsatisfiableDomain(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredUnsatisfiableDomain(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel.InferredUnsatisfiableDomain
		/// </summary>
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel.InferredUnsatisfiableDomainDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel.ORMModelDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel.ORMModelDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel.InferredUnsatisfiableDomainDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ObjectTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ObjectTypeCollection.
		/// Description for
		/// unibz.ORMInferenceEngine.UnsatisfiableObjectType.InferredUnsatisfiableDomain
		/// </summary>
		public DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> ObjectTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(global::unibz.ORMInferenceEngine.UnsatisfiableObjectType.InferredUnsatisfiableDomainDomainRoleId);
			}
		}
		#endregion
		#region FactTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// Description for
		/// unibz.ORMInferenceEngine.UnsatisfiableFactType.InferredUnsatisfiableDomain
		/// </summary>
		public DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType> FactTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>(global::unibz.ORMInferenceEngine.UnsatisfiableFactType.InferredUnsatisfiableDomainDomainRoleId);
			}
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass InferredHierarchy
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredHierarchy.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredHierarchy.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("98804ec9-a915-45e2-bb74-ffd4bcdef12c")]
	public sealed partial class InferredHierarchy : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InferredHierarchy domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x98804ec9, 0xa915, 0x45e2, 0xbb, 0x74, 0xff, 0xd4, 0xbc, 0xde, 0xf1, 0x2c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredHierarchy(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredHierarchy(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel.InferredHierarchy
		/// </summary>
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel.InferredHierarchyDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel.ORMModelDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel.ORMModelDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel.InferredHierarchyDomainRoleId, value);
				}
			}
		}
		#endregion
		#region TopObjectTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TopObjectTypeCollection.
		/// Description for unibz.ORMInferenceEngine.TopLevelObjectType.InferredHierarchy
		/// </summary>
		public DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> TopObjectTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(global::unibz.ORMInferenceEngine.TopLevelObjectType.InferredHierarchyDomainRoleId);
			}
		}
		#endregion
		#region EquivalentTopObjectTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EquivalentTopObjectTypeCollection.
		/// Description for
		/// unibz.ORMInferenceEngine.EquivalentTopLevelObjectType.InferredHierarchy
		/// </summary>
		public DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> EquivalentTopObjectTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType.InferredHierarchyDomainRoleId);
			}
		}
		#endregion
		#region TopFactTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TopFactTypeCollection.
		/// Description for unibz.ORMInferenceEngine.TopLevelFactType.InferredHierarchy
		/// </summary>
		public DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType> TopFactTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>(global::unibz.ORMInferenceEngine.TopLevelFactType.InferredHierarchyDomainRoleId);
			}
		}
		#endregion
		#region EquivalentTopFactTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EquivalentTopFactTypeCollection.
		/// Description for
		/// unibz.ORMInferenceEngine.EquivalentTopLevelFactType.InferredHierarchy
		/// </summary>
		public DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType> EquivalentTopFactTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>(global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType.InferredHierarchyDomainRoleId);
			}
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass InferredTopObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredTopObjectType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredTopObjectType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("24d946b1-d2a9-40a0-b0eb-a9acf56468c4")]
	public partial class InferredTopObjectType : global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InferredTopObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x24d946b1, 0xd2a9, 0x40a0, 0xb0, 0xeb, 0xa9, 0xac, 0xf5, 0x64, 0x68, 0xc4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredTopObjectType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredTopObjectType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass InferredEquivalentTopObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredEquivalentTopObjectType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredEquivalentTopObjectType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("781149a5-0ddf-436c-b309-b00e8f5154c7")]
	public partial class InferredEquivalentTopObjectType : global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InferredEquivalentTopObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x781149a5, 0x0ddf, 0x436c, 0xb3, 0x09, 0xb0, 0x0e, 0x8f, 0x51, 0x54, 0xc7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredEquivalentTopObjectType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredEquivalentTopObjectType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass InferredTopFactType
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredTopFactType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredTopFactType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0e80918a-1d6e-43a5-8a8c-3695f479a652")]
	public partial class InferredTopFactType : global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InferredTopFactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0e80918a, 0x1d6e, 0x43a5, 0x8a, 0x8c, 0x36, 0x95, 0xf4, 0x79, 0xa6, 0x52);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredTopFactType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredTopFactType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass InferredEquivalentTopFactType
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredEquivalentTopFactType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredEquivalentTopFactType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("60c42550-04c4-45d6-b04d-ecae022a2a2a")]
	public partial class InferredEquivalentTopFactType : global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InferredEquivalentTopFactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x60c42550, 0x04c4, 0x45d6, 0xb0, 0x4d, 0xec, 0xae, 0x02, 0x2a, 0x2a, 0x2a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredEquivalentTopFactType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredEquivalentTopFactType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass InferredConstraints
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredConstraints.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredConstraints.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("73e2969e-cba9-4e83-b739-30319bf31769")]
	public sealed partial class InferredConstraints : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InferredConstraints domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x73e2969e, 0xcba9, 0x4e83, 0xb7, 0x39, 0x30, 0x31, 0x9b, 0xf3, 0x17, 0x69);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredConstraints(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredConstraints(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel.InferredConstraints
		/// </summary>
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel.InferredConstraintsDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel.ORMModelDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel.ORMModelDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel.InferredConstraintsDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SetConstraintCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// Description for
		/// unibz.ORMInferenceEngine.SetConstraintIsInferred.InferredConstraints
		/// </summary>
		public DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint> SetConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint>(global::unibz.ORMInferenceEngine.SetConstraintIsInferred.InferredConstraintsDomainRoleId);
			}
		}
		#endregion
		#region SetComparisonConstraintCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// Description for
		/// unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred.InferredConstraints
		/// </summary>
		public DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint> SetComparisonConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint>(global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred.InferredConstraintsDomainRoleId);
			}
		}
		#endregion
		#region SubtypeFactCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SubtypeFactCollection.
		/// Description for
		/// unibz.ORMInferenceEngine.SubtypeFactIsInferred.InferredConstraints
		/// </summary>
		public DslModeling::LinkedElementCollection<InferredSubtypeFact> SubtypeFactCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<InferredSubtypeFact>, InferredSubtypeFact>(global::unibz.ORMInferenceEngine.SubtypeFactIsInferred.InferredConstraintsDomainRoleId);
			}
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass InferredSubsetConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredSubsetConstraint.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredSubsetConstraint.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6f23683c-a3f2-4683-b478-25f2811a1a83")]
	public partial class InferredSubsetConstraint : global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InferredSubsetConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6f23683c, 0xa3f2, 0x4683, 0xb4, 0x78, 0x25, 0xf2, 0x81, 0x1a, 0x1a, 0x83);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredSubsetConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredSubsetConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass InferredEqualityConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredEqualityConstraint.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredEqualityConstraint.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c068b9f9-c6a8-4c32-a99e-6e991a3af7b0")]
	public partial class InferredEqualityConstraint : global::ORMSolutions.ORMArchitect.Core.ObjectModel.EqualityConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InferredEqualityConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc068b9f9, 0xc6a8, 0x4c32, 0xa9, 0x9e, 0x6e, 0x99, 0x1a, 0x3a, 0xf7, 0xb0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredEqualityConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredEqualityConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass InferredExclusionConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredExclusionConstraint.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredExclusionConstraint.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("94f7db54-3d8a-41e6-87e6-e5acb4ef0ca9")]
	public partial class InferredExclusionConstraint : global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InferredExclusionConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x94f7db54, 0x3d8a, 0x41e6, 0x87, 0xe6, 0xe5, 0xac, 0xb4, 0xef, 0x0c, 0xa9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredExclusionConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredExclusionConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass InferredSubtypeFact
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredSubtypeFact.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredSubtypeFact.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b13fdf84-9b05-48af-a953-5dd5928f122a")]
	public partial class InferredSubtypeFact : global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeFact
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InferredSubtypeFact domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb13fdf84, 0x9b05, 0x48af, 0xa9, 0x53, 0x5d, 0xd5, 0x92, 0x8f, 0x12, 0x2a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredSubtypeFact(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredSubtypeFact(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass InferredMandatoryConstraint
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredMandatoryConstraint.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredMandatoryConstraint.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a4258b02-f416-468a-bf09-414aed389473")]
	public partial class InferredMandatoryConstraint : global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InferredMandatoryConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa4258b02, 0xf416, 0x468a, 0xbf, 0x09, 0x41, 0x4a, 0xed, 0x38, 0x94, 0x73);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredMandatoryConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredMandatoryConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass InferredFrequencyConstraint
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredFrequencyConstraint.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredFrequencyConstraint.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5422777b-6c79-428d-9531-9717cc04a9e9")]
	public partial class InferredFrequencyConstraint : global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InferredFrequencyConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5422777b, 0x6c79, 0x428d, 0x95, 0x31, 0x97, 0x17, 0xcc, 0x04, 0xa9, 0xe9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredFrequencyConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredFrequencyConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainClass InferredUniquenessConstraint
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredUniquenessConstraint.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredUniquenessConstraint.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("53c264ae-cd29-4f7e-8577-648530ed18a4")]
	public partial class InferredUniquenessConstraint : global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InferredUniquenessConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x53c264ae, 0xcd29, 0x4f7e, 0x85, 0x77, 0x64, 0x85, 0x30, 0xed, 0x18, 0xa4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredUniquenessConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InferredUniquenessConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
