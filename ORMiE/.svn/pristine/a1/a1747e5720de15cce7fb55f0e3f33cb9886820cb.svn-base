using System;
using Microsoft.VisualStudio.Modeling;
using ORMSolutions.ORMArchitect.Core.ObjectModel;
using org.semanticweb.owlapi.model;
using org.semanticweb.owlapi.reasoner;
using uk.ac.manchester.cs.jfact;
using System.Collections.Generic;
using org.unibz.ucmf.askAPI;
using System.Collections;

namespace unibz.ORMInferenceEngine
{
	partial class ORM2OWLTranslationManager
	{

		//private HashSet<FactType> alreadyProcessedEquivalentPreds = new HashSet<FactType>();

		void CreateInferredEquivalentPredicatesBackup(InferredConstraints container, InferredEquivalentPredicates equiPreds)
		{
			ORMModel model = container.Model;
			Store store = model.Store;
			Partition hierarchyPartition = Partition.FindByAlternateId(store, typeof(Hierarchy));

			if (hierarchyPartition == null)
			{
				hierarchyPartition = new Partition(store);
				hierarchyPartition.AlternateId = typeof(Hierarchy);
			}

			InferredHierarchy hierarchyContainer = InferredHierarchyIsForORMModel.GetInferredHierarchy(model);
			if (hierarchyContainer == null)
			{
				hierarchyContainer = new InferredHierarchy(hierarchyPartition);
				hierarchyContainer.Model = model;
			}
			else
			{
				hierarchyContainer.EquivalentTopFactTypeCollection.Clear();
			}

			//alreadyProcessedEquivalentPreds.Clear();

			foreach (FactType fact in model.FactTypeCollection)
			{
				//prendo la lista dei figli di fact in formato stringa
				java.util.ArrayList listEquivToPred = equiPreds.getAllPredsEquivalentTo(fact.Name);
				//se questa lista è diversa da null e il fact non e' gia stato processato, allora ci sono degli equivalenti

				if(!(fact.GetType() == typeof(SubtypeFact)))
				{

				

				if(listEquivToPred !=null /* && alreadyProcessedEquivalentPreds.Contains(fact)==false*/ )
				{
					//setto fact a padre
					EquivalentTopLevelFactType top = new EquivalentTopLevelFactType(hierarchyContainer, fact);
					//lo metto in quelli gia processati
					//alreadyProcessedEquivalentPreds.Add(fact);
				
					//per ciascun figlio
					foreach (String son in listEquivToPred)
					{
						//recupero facttype  dal model
						FactType subFactType = findFactTypeByName(model, son);
						new EquivalentFactTypeContainment(top, subFactType);
						//lo metto in quelli gia processati
						//alreadyProcessedEquivalentPreds.Add(subFactType);
					}
					//elimino il set che ho appena processato, per non avere cicli!
					equiPreds.removeAllPredsEquivalentTo(fact.Name);
				}
				else
				{
					// e' inutile far vedere tra gli equivalent chi non ha figli
					//EquivalentTopLevelFactType top = new EquivalentTopLevelFactType(hierarchyContainer, fact);
				}
				}
			}
		}
	}
}