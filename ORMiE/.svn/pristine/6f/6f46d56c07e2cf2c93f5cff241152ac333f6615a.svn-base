#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
* Copyright © ORM Solutions, LLC. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship UnsatisfiableDomainIsForORMModel
	/// Description for unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("baf92b0a-6e47-41b5-905c-07c903044b11")]
	public partial class UnsatisfiableDomainIsForORMModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UnsatisfiableDomainIsForORMModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbaf92b0a, 0x6e47, 0x41b5, 0x90, 0x5c, 0x07, 0xc9, 0x03, 0x04, 0x4b, 0x11);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UnsatisfiableDomainIsForORMModel link in the same Partition as the given UnsatisfiableDomain
		/// </summary>
		/// <param name="source">UnsatisfiableDomain to use as the source of the relationship.</param>
		/// <param name="target">ORMModel to use as the target of the relationship.</param>
		public UnsatisfiableDomainIsForORMModel(UnsatisfiableDomain source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UnsatisfiableDomainIsForORMModel.UnsatisfiableDomainDomainRoleId, source), new DslModeling::RoleAssignment(UnsatisfiableDomainIsForORMModel.ORMModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnsatisfiableDomainIsForORMModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnsatisfiableDomainIsForORMModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnsatisfiableDomainIsForORMModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnsatisfiableDomainIsForORMModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UnsatisfiableDomain domain role code
		
		/// <summary>
		/// UnsatisfiableDomain domain role Id.
		/// </summary>
		public static readonly global::System.Guid UnsatisfiableDomainDomainRoleId = new global::System.Guid(0xfcdd864d, 0x2e66, 0x4fa6, 0xaa, 0xfc, 0xbc, 0x18, 0x68, 0x5d, 0x26, 0x77);
		
		/// <summary>
		/// DomainRole UnsatisfiableDomain
		/// Description for
		/// unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel.UnsatisfiableDomain
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel/UnsatisfiableDomain.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel/UnsatisfiableDomain.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Model", PropertyDisplayNameKey="unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel/UnsatisfiableDomain.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fcdd864d-2e66-4fa6-aafc-bc18685d2677")]
		public virtual UnsatisfiableDomain UnsatisfiableDomain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UnsatisfiableDomain)DslModeling::DomainRoleInfo.GetRolePlayer(this, UnsatisfiableDomainDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UnsatisfiableDomainDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UnsatisfiableDomain of a ORMModel
		/// <summary>
		/// Gets UnsatisfiableDomain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UnsatisfiableDomain GetUnsatisfiableDomain(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ORMModelDomainRoleId) as UnsatisfiableDomain;
		}
		
		/// <summary>
		/// Sets UnsatisfiableDomain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetUnsatisfiableDomain(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel element, UnsatisfiableDomain newUnsatisfiableDomain)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ORMModelDomainRoleId, newUnsatisfiableDomain);
		}
		#endregion
		#region ORMModel domain role code
		
		/// <summary>
		/// ORMModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ORMModelDomainRoleId = new global::System.Guid(0xf49d0190, 0x1b54, 0x411a, 0x8f, 0x09, 0xb3, 0xfb, 0xb7, 0xd0, 0x46, 0xf4);
		
		/// <summary>
		/// DomainRole ORMModel
		/// Description for
		/// unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel.ORMModel
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel/ORMModel.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel/ORMModel.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UnsatisfiableDomain", PropertyDisplayNameKey="unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel/ORMModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f49d0190-1b54-411a-8f09-b3fbb7d046f4")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel ORMModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ORMModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ORMModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a UnsatisfiableDomain
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel GetModel(UnsatisfiableDomain element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UnsatisfiableDomainDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(UnsatisfiableDomain element, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel newORMModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UnsatisfiableDomainDomainRoleId, newORMModel);
		}
		#endregion
		#region UnsatisfiableDomain link accessor
		/// <summary>
		/// Get the UnsatisfiableDomainIsForORMModel link to a UnsatisfiableDomain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel GetLinkToModel (global::unibz.ORMInferenceEngine.UnsatisfiableDomain unsatisfiableDomainInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel>(unsatisfiableDomainInstance, global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel.UnsatisfiableDomainDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of UnsatisfiableDomain not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ORMModel link accessor
		/// <summary>
		/// Get the UnsatisfiableDomainIsForORMModel link to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel GetLinkToUnsatisfiableDomain (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel oRMModelInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel>(oRMModelInstance, global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel.ORMModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ORMModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UnsatisfiableDomainIsForORMModel instance accessors
		
		/// <summary>
		/// Get any UnsatisfiableDomainIsForORMModel links between a given UnsatisfiableDomain and a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel> GetLinks( global::unibz.ORMInferenceEngine.UnsatisfiableDomain source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel>(source, global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel.UnsatisfiableDomainDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UnsatisfiableDomainIsForORMModel link between a given UnsatisfiableDomainand a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel GetLink( global::unibz.ORMInferenceEngine.UnsatisfiableDomain source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel>(source, global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel.UnsatisfiableDomainDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship InferredUnsatisfiableDomainIsForORMModel
	/// Description for
	/// unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1aaa5bad-1f1a-4c6f-94d3-48e07fac803c")]
	public partial class InferredUnsatisfiableDomainIsForORMModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InferredUnsatisfiableDomainIsForORMModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1aaa5bad, 0x1f1a, 0x4c6f, 0x94, 0xd3, 0x48, 0xe0, 0x7f, 0xac, 0x80, 0x3c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InferredUnsatisfiableDomainIsForORMModel link in the same Partition as the given InferredUnsatisfiableDomain
		/// </summary>
		/// <param name="source">InferredUnsatisfiableDomain to use as the source of the relationship.</param>
		/// <param name="target">ORMModel to use as the target of the relationship.</param>
		public InferredUnsatisfiableDomainIsForORMModel(InferredUnsatisfiableDomain source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InferredUnsatisfiableDomainIsForORMModel.InferredUnsatisfiableDomainDomainRoleId, source), new DslModeling::RoleAssignment(InferredUnsatisfiableDomainIsForORMModel.ORMModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InferredUnsatisfiableDomainIsForORMModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InferredUnsatisfiableDomainIsForORMModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InferredUnsatisfiableDomainIsForORMModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InferredUnsatisfiableDomainIsForORMModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferredUnsatisfiableDomain domain role code
		
		/// <summary>
		/// InferredUnsatisfiableDomain domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferredUnsatisfiableDomainDomainRoleId = new global::System.Guid(0x649191ad, 0xbf6d, 0x458f, 0xa1, 0xb6, 0xc8, 0x09, 0x17, 0x26, 0x14, 0x4b);
		
		/// <summary>
		/// DomainRole InferredUnsatisfiableDomain
		/// Description for
		/// unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel.InferredUnsatisfiableDomain
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel/InferredUnsatisfiableDomain.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel/InferredUnsatisfiableDomain.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Model", PropertyDisplayNameKey="unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel/InferredUnsatisfiableDomain.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("649191ad-bf6d-458f-a1b6-c8091726144b")]
		public virtual InferredUnsatisfiableDomain InferredUnsatisfiableDomain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredUnsatisfiableDomain)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferredUnsatisfiableDomainDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferredUnsatisfiableDomainDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferredUnsatisfiableDomain of a ORMModel
		/// <summary>
		/// Gets InferredUnsatisfiableDomain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InferredUnsatisfiableDomain GetInferredUnsatisfiableDomain(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ORMModelDomainRoleId) as InferredUnsatisfiableDomain;
		}
		
		/// <summary>
		/// Sets InferredUnsatisfiableDomain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInferredUnsatisfiableDomain(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel element, InferredUnsatisfiableDomain newInferredUnsatisfiableDomain)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ORMModelDomainRoleId, newInferredUnsatisfiableDomain);
		}
		#endregion
		#region ORMModel domain role code
		
		/// <summary>
		/// ORMModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ORMModelDomainRoleId = new global::System.Guid(0x596fd48f, 0x7a44, 0x4dea, 0xae, 0xaa, 0xfa, 0x52, 0x29, 0xef, 0x32, 0xd1);
		
		/// <summary>
		/// DomainRole ORMModel
		/// Description for
		/// unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel.ORMModel
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel/ORMModel.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel/ORMModel.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferredUnsatisfiableDomain", PropertyDisplayNameKey="unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel/ORMModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("596fd48f-7a44-4dea-aeaa-fa5229ef32d1")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel ORMModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ORMModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ORMModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a InferredUnsatisfiableDomain
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel GetModel(InferredUnsatisfiableDomain element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InferredUnsatisfiableDomainDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(InferredUnsatisfiableDomain element, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel newORMModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InferredUnsatisfiableDomainDomainRoleId, newORMModel);
		}
		#endregion
		#region InferredUnsatisfiableDomain link accessor
		/// <summary>
		/// Get the InferredUnsatisfiableDomainIsForORMModel link to a InferredUnsatisfiableDomain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel GetLinkToModel (global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomain inferredUnsatisfiableDomainInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel>(inferredUnsatisfiableDomainInstance, global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel.InferredUnsatisfiableDomainDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InferredUnsatisfiableDomain not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ORMModel link accessor
		/// <summary>
		/// Get the InferredUnsatisfiableDomainIsForORMModel link to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel GetLinkToInferredUnsatisfiableDomain (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel oRMModelInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel>(oRMModelInstance, global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel.ORMModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ORMModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InferredUnsatisfiableDomainIsForORMModel instance accessors
		
		/// <summary>
		/// Get any InferredUnsatisfiableDomainIsForORMModel links between a given InferredUnsatisfiableDomain and a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel> GetLinks( global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomain source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel>(source, global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel.InferredUnsatisfiableDomainDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InferredUnsatisfiableDomainIsForORMModel link between a given InferredUnsatisfiableDomainand a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel GetLink( global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomain source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel>(source, global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel.InferredUnsatisfiableDomainDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship UnsatisfiableObjectType
	/// Description for unibz.ORMInferenceEngine.UnsatisfiableObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.UnsatisfiableObjectType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.UnsatisfiableObjectType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("94f223cd-95fa-487a-b21b-846ad7f931d8")]
	public sealed partial class UnsatisfiableObjectType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UnsatisfiableObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x94f223cd, 0x95fa, 0x487a, 0xb2, 0x1b, 0x84, 0x6a, 0xd7, 0xf9, 0x31, 0xd8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UnsatisfiableObjectType link in the same Partition as the given InferredUnsatisfiableDomain
		/// </summary>
		/// <param name="source">InferredUnsatisfiableDomain to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public UnsatisfiableObjectType(InferredUnsatisfiableDomain source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UnsatisfiableObjectType.InferredUnsatisfiableDomainDomainRoleId, source), new DslModeling::RoleAssignment(UnsatisfiableObjectType.ObjectTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnsatisfiableObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnsatisfiableObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnsatisfiableObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnsatisfiableObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferredUnsatisfiableDomain domain role code
		
		/// <summary>
		/// InferredUnsatisfiableDomain domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferredUnsatisfiableDomainDomainRoleId = new global::System.Guid(0xf140a7df, 0xa42a, 0x4e7c, 0x8c, 0x4b, 0x08, 0xeb, 0xfa, 0xb8, 0x78, 0xce);
		
		/// <summary>
		/// DomainRole InferredUnsatisfiableDomain
		/// Description for
		/// unibz.ORMInferenceEngine.UnsatisfiableObjectType.InferredUnsatisfiableDomain
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.UnsatisfiableObjectType/InferredUnsatisfiableDomain.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.UnsatisfiableObjectType/InferredUnsatisfiableDomain.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectTypeCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.UnsatisfiableObjectType/InferredUnsatisfiableDomain.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f140a7df-a42a-4e7c-8c4b-08ebfab878ce")]
		public InferredUnsatisfiableDomain InferredUnsatisfiableDomain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredUnsatisfiableDomain)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferredUnsatisfiableDomainDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferredUnsatisfiableDomainDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferredUnsatisfiableDomain of a ObjectType
		/// <summary>
		/// Gets InferredUnsatisfiableDomain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InferredUnsatisfiableDomain GetInferredUnsatisfiableDomain(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as InferredUnsatisfiableDomain;
		}
		
		/// <summary>
		/// Sets InferredUnsatisfiableDomain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInferredUnsatisfiableDomain(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element, InferredUnsatisfiableDomain newInferredUnsatisfiableDomain)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newInferredUnsatisfiableDomain);
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xa40a2716, 0xb654, 0x4364, 0x8a, 0x5f, 0xb6, 0x4c, 0x92, 0x8f, 0x3a, 0xb6);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for unibz.ORMInferenceEngine.UnsatisfiableObjectType.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.UnsatisfiableObjectType/ObjectType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.UnsatisfiableObjectType/ObjectType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferredUnsatisfiableDomain", PropertyDisplayNameKey="unibz.ORMInferenceEngine.UnsatisfiableObjectType/ObjectType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a40a2716-b654-4364-8a5f-b64c928f3ab6")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeCollection of a InferredUnsatisfiableDomain
		/// <summary>
		/// Gets a list of ObjectTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> GetObjectTypeCollection(InferredUnsatisfiableDomain element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(element, InferredUnsatisfiableDomainDomainRoleId);
		}
		#endregion
		#region InferredUnsatisfiableDomain link accessor
		/// <summary>
		/// Get the list of UnsatisfiableObjectType links to a InferredUnsatisfiableDomain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.UnsatisfiableObjectType> GetLinksToObjectTypeCollection ( global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomain inferredUnsatisfiableDomainInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.UnsatisfiableObjectType>(inferredUnsatisfiableDomainInstance, global::unibz.ORMInferenceEngine.UnsatisfiableObjectType.InferredUnsatisfiableDomainDomainRoleId);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the UnsatisfiableObjectType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.UnsatisfiableObjectType GetLinkToInferredUnsatisfiableDomain (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.UnsatisfiableObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.UnsatisfiableObjectType>(objectTypeInstance, global::unibz.ORMInferenceEngine.UnsatisfiableObjectType.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UnsatisfiableObjectType instance accessors
		
		/// <summary>
		/// Get any UnsatisfiableObjectType links between a given InferredUnsatisfiableDomain and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.UnsatisfiableObjectType> GetLinks( global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomain source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.UnsatisfiableObjectType> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.UnsatisfiableObjectType>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.UnsatisfiableObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.UnsatisfiableObjectType>(source, global::unibz.ORMInferenceEngine.UnsatisfiableObjectType.InferredUnsatisfiableDomainDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.UnsatisfiableObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UnsatisfiableObjectType link between a given InferredUnsatisfiableDomainand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.UnsatisfiableObjectType GetLink( global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomain source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.UnsatisfiableObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.UnsatisfiableObjectType>(source, global::unibz.ORMInferenceEngine.UnsatisfiableObjectType.InferredUnsatisfiableDomainDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.UnsatisfiableObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship UnsatisfiableFactType
	/// Description for unibz.ORMInferenceEngine.UnsatisfiableFactType
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.UnsatisfiableFactType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.UnsatisfiableFactType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("077f9b3c-9a7a-42e3-89da-aa388c58e7fc")]
	public sealed partial class UnsatisfiableFactType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UnsatisfiableFactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x077f9b3c, 0x9a7a, 0x42e3, 0x89, 0xda, 0xaa, 0x38, 0x8c, 0x58, 0xe7, 0xfc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UnsatisfiableFactType link in the same Partition as the given InferredUnsatisfiableDomain
		/// </summary>
		/// <param name="source">InferredUnsatisfiableDomain to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public UnsatisfiableFactType(InferredUnsatisfiableDomain source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UnsatisfiableFactType.InferredUnsatisfiableDomainDomainRoleId, source), new DslModeling::RoleAssignment(UnsatisfiableFactType.FactTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnsatisfiableFactType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnsatisfiableFactType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnsatisfiableFactType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnsatisfiableFactType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferredUnsatisfiableDomain domain role code
		
		/// <summary>
		/// InferredUnsatisfiableDomain domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferredUnsatisfiableDomainDomainRoleId = new global::System.Guid(0x9cabd542, 0xd7da, 0x47c6, 0x93, 0x73, 0xb7, 0x18, 0x4b, 0x3f, 0x72, 0x3c);
		
		/// <summary>
		/// DomainRole InferredUnsatisfiableDomain
		/// Description for
		/// unibz.ORMInferenceEngine.UnsatisfiableFactType.InferredUnsatisfiableDomain
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.UnsatisfiableFactType/InferredUnsatisfiableDomain.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.UnsatisfiableFactType/InferredUnsatisfiableDomain.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FactTypeCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.UnsatisfiableFactType/InferredUnsatisfiableDomain.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9cabd542-d7da-47c6-9373-b7184b3f723c")]
		public InferredUnsatisfiableDomain InferredUnsatisfiableDomain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredUnsatisfiableDomain)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferredUnsatisfiableDomainDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferredUnsatisfiableDomainDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferredUnsatisfiableDomain of a FactType
		/// <summary>
		/// Gets InferredUnsatisfiableDomain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InferredUnsatisfiableDomain GetInferredUnsatisfiableDomain(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as InferredUnsatisfiableDomain;
		}
		
		/// <summary>
		/// Sets InferredUnsatisfiableDomain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInferredUnsatisfiableDomain(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element, InferredUnsatisfiableDomain newInferredUnsatisfiableDomain)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newInferredUnsatisfiableDomain);
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xacc6e62e, 0xece1, 0x49bd, 0x90, 0xd6, 0xc3, 0x9d, 0xcb, 0x95, 0xa1, 0x77);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for unibz.ORMInferenceEngine.UnsatisfiableFactType.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.UnsatisfiableFactType/FactType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.UnsatisfiableFactType/FactType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferredUnsatisfiableDomain", PropertyDisplayNameKey="unibz.ORMInferenceEngine.UnsatisfiableFactType/FactType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("acc6e62e-ece1-49bd-90d6-c39dcb95a177")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeCollection of a InferredUnsatisfiableDomain
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType> GetFactTypeCollection(InferredUnsatisfiableDomain element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>(element, InferredUnsatisfiableDomainDomainRoleId);
		}
		#endregion
		#region InferredUnsatisfiableDomain link accessor
		/// <summary>
		/// Get the list of UnsatisfiableFactType links to a InferredUnsatisfiableDomain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.UnsatisfiableFactType> GetLinksToFactTypeCollection ( global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomain inferredUnsatisfiableDomainInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.UnsatisfiableFactType>(inferredUnsatisfiableDomainInstance, global::unibz.ORMInferenceEngine.UnsatisfiableFactType.InferredUnsatisfiableDomainDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the UnsatisfiableFactType link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.UnsatisfiableFactType GetLinkToInferredUnsatisfiableDomain (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.UnsatisfiableFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.UnsatisfiableFactType>(factTypeInstance, global::unibz.ORMInferenceEngine.UnsatisfiableFactType.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UnsatisfiableFactType instance accessors
		
		/// <summary>
		/// Get any UnsatisfiableFactType links between a given InferredUnsatisfiableDomain and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.UnsatisfiableFactType> GetLinks( global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomain source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.UnsatisfiableFactType> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.UnsatisfiableFactType>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.UnsatisfiableFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.UnsatisfiableFactType>(source, global::unibz.ORMInferenceEngine.UnsatisfiableFactType.InferredUnsatisfiableDomainDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.UnsatisfiableFactType link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UnsatisfiableFactType link between a given InferredUnsatisfiableDomainand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.UnsatisfiableFactType GetLink( global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomain source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.UnsatisfiableFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.UnsatisfiableFactType>(source, global::unibz.ORMInferenceEngine.UnsatisfiableFactType.InferredUnsatisfiableDomainDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.UnsatisfiableFactType link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship HierarchyIsForORMModel
	/// Description for unibz.ORMInferenceEngine.HierarchyIsForORMModel
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.HierarchyIsForORMModel.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.HierarchyIsForORMModel.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1e1cac8e-d4dc-401c-99c9-3ffdd81fa940")]
	public partial class HierarchyIsForORMModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// HierarchyIsForORMModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1e1cac8e, 0xd4dc, 0x401c, 0x99, 0xc9, 0x3f, 0xfd, 0xd8, 0x1f, 0xa9, 0x40);
	
				
		/// <summary>
		/// Constructor
		/// Creates a HierarchyIsForORMModel link in the same Partition as the given Hierarchy
		/// </summary>
		/// <param name="source">Hierarchy to use as the source of the relationship.</param>
		/// <param name="target">ORMModel to use as the target of the relationship.</param>
		public HierarchyIsForORMModel(Hierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(HierarchyIsForORMModel.HierarchyDomainRoleId, source), new DslModeling::RoleAssignment(HierarchyIsForORMModel.ORMModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HierarchyIsForORMModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HierarchyIsForORMModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HierarchyIsForORMModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HierarchyIsForORMModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Hierarchy domain role code
		
		/// <summary>
		/// Hierarchy domain role Id.
		/// </summary>
		public static readonly global::System.Guid HierarchyDomainRoleId = new global::System.Guid(0xb2927fc6, 0x04b5, 0x408a, 0xb7, 0x1b, 0x1d, 0xf0, 0xb2, 0x76, 0xa7, 0x86);
		
		/// <summary>
		/// DomainRole Hierarchy
		/// Description for unibz.ORMInferenceEngine.HierarchyIsForORMModel.Hierarchy
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.HierarchyIsForORMModel/Hierarchy.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.HierarchyIsForORMModel/Hierarchy.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Model", PropertyDisplayNameKey="unibz.ORMInferenceEngine.HierarchyIsForORMModel/Hierarchy.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b2927fc6-04b5-408a-b71b-1df0b276a786")]
		public virtual Hierarchy Hierarchy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Hierarchy)DslModeling::DomainRoleInfo.GetRolePlayer(this, HierarchyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HierarchyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Hierarchy of a ORMModel
		/// <summary>
		/// Gets Hierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Hierarchy GetHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ORMModelDomainRoleId) as Hierarchy;
		}
		
		/// <summary>
		/// Sets Hierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel element, Hierarchy newHierarchy)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ORMModelDomainRoleId, newHierarchy);
		}
		#endregion
		#region ORMModel domain role code
		
		/// <summary>
		/// ORMModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ORMModelDomainRoleId = new global::System.Guid(0x71f2482d, 0xcb7c, 0x4ed0, 0xad, 0xa7, 0x27, 0x97, 0xa3, 0xd9, 0xa1, 0x6d);
		
		/// <summary>
		/// DomainRole ORMModel
		/// Description for unibz.ORMInferenceEngine.HierarchyIsForORMModel.ORMModel
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.HierarchyIsForORMModel/ORMModel.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.HierarchyIsForORMModel/ORMModel.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Hierarchy", PropertyDisplayNameKey="unibz.ORMInferenceEngine.HierarchyIsForORMModel/ORMModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("71f2482d-cb7c-4ed0-ada7-2797a3d9a16d")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel ORMModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ORMModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ORMModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Hierarchy
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel GetModel(Hierarchy element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, HierarchyDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Hierarchy element, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel newORMModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, HierarchyDomainRoleId, newORMModel);
		}
		#endregion
		#region Hierarchy link accessor
		/// <summary>
		/// Get the HierarchyIsForORMModel link to a Hierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.HierarchyIsForORMModel GetLinkToModel (global::unibz.ORMInferenceEngine.Hierarchy hierarchyInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.HierarchyIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.HierarchyIsForORMModel>(hierarchyInstance, global::unibz.ORMInferenceEngine.HierarchyIsForORMModel.HierarchyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Hierarchy not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ORMModel link accessor
		/// <summary>
		/// Get the HierarchyIsForORMModel link to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.HierarchyIsForORMModel GetLinkToHierarchy (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel oRMModelInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.HierarchyIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.HierarchyIsForORMModel>(oRMModelInstance, global::unibz.ORMInferenceEngine.HierarchyIsForORMModel.ORMModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ORMModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region HierarchyIsForORMModel instance accessors
		
		/// <summary>
		/// Get any HierarchyIsForORMModel links between a given Hierarchy and a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.HierarchyIsForORMModel> GetLinks( global::unibz.ORMInferenceEngine.Hierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.HierarchyIsForORMModel> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.HierarchyIsForORMModel>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.HierarchyIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.HierarchyIsForORMModel>(source, global::unibz.ORMInferenceEngine.HierarchyIsForORMModel.HierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.HierarchyIsForORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one HierarchyIsForORMModel link between a given Hierarchyand a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.HierarchyIsForORMModel GetLink( global::unibz.ORMInferenceEngine.Hierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.HierarchyIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.HierarchyIsForORMModel>(source, global::unibz.ORMInferenceEngine.HierarchyIsForORMModel.HierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.HierarchyIsForORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship InferredHierarchyIsForORMModel
	/// Description for unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f991efc0-1f21-4ded-ab72-c2ddbdb5e8cd")]
	public partial class InferredHierarchyIsForORMModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InferredHierarchyIsForORMModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf991efc0, 0x1f21, 0x4ded, 0xab, 0x72, 0xc2, 0xdd, 0xbd, 0xb5, 0xe8, 0xcd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InferredHierarchyIsForORMModel link in the same Partition as the given InferredHierarchy
		/// </summary>
		/// <param name="source">InferredHierarchy to use as the source of the relationship.</param>
		/// <param name="target">ORMModel to use as the target of the relationship.</param>
		public InferredHierarchyIsForORMModel(InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InferredHierarchyIsForORMModel.InferredHierarchyDomainRoleId, source), new DslModeling::RoleAssignment(InferredHierarchyIsForORMModel.ORMModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InferredHierarchyIsForORMModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InferredHierarchyIsForORMModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InferredHierarchyIsForORMModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InferredHierarchyIsForORMModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferredHierarchy domain role code
		
		/// <summary>
		/// InferredHierarchy domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferredHierarchyDomainRoleId = new global::System.Guid(0x825a2143, 0x3847, 0x419d, 0x9a, 0x81, 0x38, 0xdd, 0x14, 0x08, 0xfe, 0x06);
		
		/// <summary>
		/// DomainRole InferredHierarchy
		/// Description for
		/// unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel.InferredHierarchy
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel/InferredHierarchy.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel/InferredHierarchy.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Model", PropertyDisplayNameKey="unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel/InferredHierarchy.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("825a2143-3847-419d-9a81-38dd1408fe06")]
		public virtual InferredHierarchy InferredHierarchy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredHierarchy)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferredHierarchyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferredHierarchyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferredHierarchy of a ORMModel
		/// <summary>
		/// Gets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InferredHierarchy GetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ORMModelDomainRoleId) as InferredHierarchy;
		}
		
		/// <summary>
		/// Sets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel element, InferredHierarchy newInferredHierarchy)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ORMModelDomainRoleId, newInferredHierarchy);
		}
		#endregion
		#region ORMModel domain role code
		
		/// <summary>
		/// ORMModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ORMModelDomainRoleId = new global::System.Guid(0x3c04fc1c, 0xfc7b, 0x4d28, 0xab, 0xbe, 0x64, 0x44, 0x40, 0x55, 0xda, 0xae);
		
		/// <summary>
		/// DomainRole ORMModel
		/// Description for unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel.ORMModel
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel/ORMModel.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel/ORMModel.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferredHierarchy", PropertyDisplayNameKey="unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel/ORMModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3c04fc1c-fc7b-4d28-abbe-64444055daae")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel ORMModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ORMModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ORMModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a InferredHierarchy
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel GetModel(InferredHierarchy element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InferredHierarchyDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(InferredHierarchy element, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel newORMModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InferredHierarchyDomainRoleId, newORMModel);
		}
		#endregion
		#region InferredHierarchy link accessor
		/// <summary>
		/// Get the InferredHierarchyIsForORMModel link to a InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel GetLinkToModel (global::unibz.ORMInferenceEngine.InferredHierarchy inferredHierarchyInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel>(inferredHierarchyInstance, global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel.InferredHierarchyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InferredHierarchy not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ORMModel link accessor
		/// <summary>
		/// Get the InferredHierarchyIsForORMModel link to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel GetLinkToInferredHierarchy (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel oRMModelInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel>(oRMModelInstance, global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel.ORMModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ORMModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InferredHierarchyIsForORMModel instance accessors
		
		/// <summary>
		/// Get any InferredHierarchyIsForORMModel links between a given InferredHierarchy and a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel> GetLinks( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel>(source, global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InferredHierarchyIsForORMModel link between a given InferredHierarchyand a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel GetLink( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel>(source, global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship TopLevelObjectType
	/// Description for unibz.ORMInferenceEngine.TopLevelObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.TopLevelObjectType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.TopLevelObjectType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("77204642-1413-45b5-8bd7-549f49b73c50")]
	public sealed partial class TopLevelObjectType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TopLevelObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x77204642, 0x1413, 0x45b5, 0x8b, 0xd7, 0x54, 0x9f, 0x49, 0xb7, 0x3c, 0x50);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TopLevelObjectType link in the same Partition as the given InferredHierarchy
		/// </summary>
		/// <param name="source">InferredHierarchy to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public TopLevelObjectType(InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TopLevelObjectType.InferredHierarchyDomainRoleId, source), new DslModeling::RoleAssignment(TopLevelObjectType.ObjectTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TopLevelObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TopLevelObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TopLevelObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TopLevelObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferredHierarchy domain role code
		
		/// <summary>
		/// InferredHierarchy domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferredHierarchyDomainRoleId = new global::System.Guid(0x7425127e, 0x6cff, 0x4cce, 0xb4, 0x04, 0x32, 0xde, 0x9d, 0x14, 0x34, 0xf1);
		
		/// <summary>
		/// DomainRole InferredHierarchy
		/// Description for unibz.ORMInferenceEngine.TopLevelObjectType.InferredHierarchy
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.TopLevelObjectType/InferredHierarchy.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.TopLevelObjectType/InferredHierarchy.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TopObjectTypeCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.TopLevelObjectType/InferredHierarchy.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7425127e-6cff-4cce-b404-32de9d1434f1")]
		public InferredHierarchy InferredHierarchy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredHierarchy)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferredHierarchyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferredHierarchyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferredHierarchy of a ObjectType
		/// <summary>
		/// Gets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InferredHierarchy GetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as InferredHierarchy;
		}
		
		/// <summary>
		/// Sets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element, InferredHierarchy newInferredHierarchy)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newInferredHierarchy);
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xb455862c, 0x55ee, 0x48ea, 0x9d, 0xd0, 0x4a, 0xed, 0x5a, 0xdc, 0xb3, 0x12);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for unibz.ORMInferenceEngine.TopLevelObjectType.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.TopLevelObjectType/ObjectType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.TopLevelObjectType/ObjectType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferredHierarchy", PropertyDisplayNameKey="unibz.ORMInferenceEngine.TopLevelObjectType/ObjectType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b455862c-55ee-48ea-9dd0-4aed5adcb312")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TopObjectTypeCollection of a InferredHierarchy
		/// <summary>
		/// Gets a list of TopObjectTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> GetTopObjectTypeCollection(InferredHierarchy element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(element, InferredHierarchyDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ChildCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ChildCollection.
		/// Description for unibz.ORMInferenceEngine.ObjectTypeContainment.Parent
		/// </summary>
		public DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> ChildCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(global::unibz.ORMInferenceEngine.ObjectTypeContainment.ParentDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region InferredHierarchy link accessor
		/// <summary>
		/// Get the list of TopLevelObjectType links to a InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.TopLevelObjectType> GetLinksToTopObjectTypeCollection ( global::unibz.ORMInferenceEngine.InferredHierarchy inferredHierarchyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.TopLevelObjectType>(inferredHierarchyInstance, global::unibz.ORMInferenceEngine.TopLevelObjectType.InferredHierarchyDomainRoleId);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the TopLevelObjectType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.TopLevelObjectType GetLinkToInferredHierarchy (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.TopLevelObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.TopLevelObjectType>(objectTypeInstance, global::unibz.ORMInferenceEngine.TopLevelObjectType.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TopLevelObjectType instance accessors
		
		/// <summary>
		/// Get any TopLevelObjectType links between a given InferredHierarchy and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.TopLevelObjectType> GetLinks( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.TopLevelObjectType> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.TopLevelObjectType>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.TopLevelObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.TopLevelObjectType>(source, global::unibz.ORMInferenceEngine.TopLevelObjectType.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.TopLevelObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TopLevelObjectType link between a given InferredHierarchyand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.TopLevelObjectType GetLink( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.TopLevelObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.TopLevelObjectType>(source, global::unibz.ORMInferenceEngine.TopLevelObjectType.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.TopLevelObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship ObjectTypeContainment
	/// Description for unibz.ORMInferenceEngine.ObjectTypeContainment
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.ObjectTypeContainment.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.ObjectTypeContainment.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8b2b52bc-7f06-48e2-aff3-da8a20df854b")]
	public sealed partial class ObjectTypeContainment : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeContainment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8b2b52bc, 0x7f06, 0x48e2, 0xaf, 0xf3, 0xda, 0x8a, 0x20, 0xdf, 0x85, 0x4b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeContainment link in the same Partition as the given TopLevelObjectType
		/// </summary>
		/// <param name="source">TopLevelObjectType to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public ObjectTypeContainment(TopLevelObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeContainment.ParentDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeContainment.ChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeContainment(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeContainment(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeContainment(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeContainment(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0xe3cee9fb, 0xf40e, 0x4cec, 0x83, 0x66, 0xb4, 0xc0, 0xef, 0xf5, 0xfa, 0xdc);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for unibz.ORMInferenceEngine.ObjectTypeContainment.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.ObjectTypeContainment/Parent.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.ObjectTypeContainment/Parent.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.ObjectTypeContainment/Parent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e3cee9fb-f40e-4cec-8366-b4c0eff5fadc")]
		public TopLevelObjectType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TopLevelObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentCollection of a ObjectType
		/// <summary>
		/// Gets a list of ParentCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TopLevelObjectType> GetParentCollection(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TopLevelObjectType>, TopLevelObjectType>(element, ChildDomainRoleId);
		}
		#endregion
		#region Child domain role code
		
		/// <summary>
		/// Child domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildDomainRoleId = new global::System.Guid(0x1e354dc0, 0xa4be, 0x47c8, 0xb8, 0x72, 0x6c, 0x4e, 0x0e, 0x46, 0x1d, 0xb9);
		
		/// <summary>
		/// DomainRole Child
		/// Description for unibz.ORMInferenceEngine.ObjectTypeContainment.Child
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.ObjectTypeContainment/Child.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.ObjectTypeContainment/Child.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.ObjectTypeContainment/Child.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1e354dc0-a4be-47c8-b872-6c4e0e461db9")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType Child
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildCollection of a TopLevelObjectType
		/// <summary>
		/// Gets a list of ChildCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> GetChildCollection(TopLevelObjectType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of ObjectTypeContainment links to a TopLevelObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.ObjectTypeContainment> GetLinksToChildCollection ( global::unibz.ORMInferenceEngine.TopLevelObjectType parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.ObjectTypeContainment>(parentInstance, global::unibz.ORMInferenceEngine.ObjectTypeContainment.ParentDomainRoleId);
		}
		#endregion
		#region Child link accessor
		/// <summary>
		/// Get the list of ObjectTypeContainment links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.ObjectTypeContainment> GetLinksToParentCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType childInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.ObjectTypeContainment>(childInstance, global::unibz.ORMInferenceEngine.ObjectTypeContainment.ChildDomainRoleId);
		}
		#endregion
		#region ObjectTypeContainment instance accessors
		
		/// <summary>
		/// Get any ObjectTypeContainment links between a given TopLevelObjectType and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.ObjectTypeContainment> GetLinks( global::unibz.ORMInferenceEngine.TopLevelObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.ObjectTypeContainment> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.ObjectTypeContainment>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.ObjectTypeContainment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.ObjectTypeContainment>(source, global::unibz.ORMInferenceEngine.ObjectTypeContainment.ParentDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.ObjectTypeContainment link in links )
			{
				if ( target.Equals(link.Child) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeContainment link between a given TopLevelObjectTypeand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.ObjectTypeContainment GetLink( global::unibz.ORMInferenceEngine.TopLevelObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.ObjectTypeContainment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.ObjectTypeContainment>(source, global::unibz.ORMInferenceEngine.ObjectTypeContainment.ParentDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.ObjectTypeContainment link in links )
			{
				if ( target.Equals(link.Child) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship EquivalentTopLevelObjectType
	/// Description for unibz.ORMInferenceEngine.EquivalentTopLevelObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.EquivalentTopLevelObjectType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.EquivalentTopLevelObjectType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4a70007c-ba66-4607-82f7-a4bc2108d8d2")]
	public sealed partial class EquivalentTopLevelObjectType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EquivalentTopLevelObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4a70007c, 0xba66, 0x4607, 0x82, 0xf7, 0xa4, 0xbc, 0x21, 0x08, 0xd8, 0xd2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EquivalentTopLevelObjectType link in the same Partition as the given InferredHierarchy
		/// </summary>
		/// <param name="source">InferredHierarchy to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public EquivalentTopLevelObjectType(InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EquivalentTopLevelObjectType.InferredHierarchyDomainRoleId, source), new DslModeling::RoleAssignment(EquivalentTopLevelObjectType.ObjectTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EquivalentTopLevelObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EquivalentTopLevelObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EquivalentTopLevelObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EquivalentTopLevelObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferredHierarchy domain role code
		
		/// <summary>
		/// InferredHierarchy domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferredHierarchyDomainRoleId = new global::System.Guid(0xa9ab21b0, 0xb656, 0x427e, 0xb2, 0xc3, 0xed, 0x13, 0x47, 0x63, 0x96, 0xe5);
		
		/// <summary>
		/// DomainRole InferredHierarchy
		/// Description for
		/// unibz.ORMInferenceEngine.EquivalentTopLevelObjectType.InferredHierarchy
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.EquivalentTopLevelObjectType/InferredHierarchy.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.EquivalentTopLevelObjectType/InferredHierarchy.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EquivalentTopObjectTypeCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.EquivalentTopLevelObjectType/InferredHierarchy.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a9ab21b0-b656-427e-b2c3-ed13476396e5")]
		public InferredHierarchy InferredHierarchy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredHierarchy)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferredHierarchyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferredHierarchyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferredHierarchy of a ObjectType
		/// <summary>
		/// Gets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InferredHierarchy GetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as InferredHierarchy;
		}
		
		/// <summary>
		/// Sets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element, InferredHierarchy newInferredHierarchy)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newInferredHierarchy);
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xc8dab87b, 0xc83c, 0x4ef8, 0xb8, 0x15, 0x3d, 0xda, 0x2d, 0x2f, 0xef, 0xba);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for unibz.ORMInferenceEngine.EquivalentTopLevelObjectType.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.EquivalentTopLevelObjectType/ObjectType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.EquivalentTopLevelObjectType/ObjectType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferredHierarchy", PropertyDisplayNameKey="unibz.ORMInferenceEngine.EquivalentTopLevelObjectType/ObjectType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c8dab87b-c83c-4ef8-b815-3dda2d2fefba")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EquivalentTopObjectTypeCollection of a InferredHierarchy
		/// <summary>
		/// Gets a list of EquivalentTopObjectTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> GetEquivalentTopObjectTypeCollection(InferredHierarchy element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(element, InferredHierarchyDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ChildCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ChildCollection.
		/// Description for unibz.ORMInferenceEngine.EquivalentObjectTypeContainment.Parent
		/// </summary>
		public DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> ChildCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment.ParentDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region InferredHierarchy link accessor
		/// <summary>
		/// Get the list of EquivalentTopLevelObjectType links to a InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType> GetLinksToEquivalentTopObjectTypeCollection ( global::unibz.ORMInferenceEngine.InferredHierarchy inferredHierarchyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType>(inferredHierarchyInstance, global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType.InferredHierarchyDomainRoleId);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the EquivalentTopLevelObjectType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType GetLinkToInferredHierarchy (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType>(objectTypeInstance, global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EquivalentTopLevelObjectType instance accessors
		
		/// <summary>
		/// Get any EquivalentTopLevelObjectType links between a given InferredHierarchy and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType> GetLinks( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType>(source, global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EquivalentTopLevelObjectType link between a given InferredHierarchyand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType GetLink( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType>(source, global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship EquivalentObjectTypeContainment
	/// Description for unibz.ORMInferenceEngine.EquivalentObjectTypeContainment
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.EquivalentObjectTypeContainment.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.EquivalentObjectTypeContainment.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("47c1fa68-3f15-4306-86bd-603addd20b9d")]
	public sealed partial class EquivalentObjectTypeContainment : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EquivalentObjectTypeContainment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x47c1fa68, 0x3f15, 0x4306, 0x86, 0xbd, 0x60, 0x3a, 0xdd, 0xd2, 0x0b, 0x9d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EquivalentObjectTypeContainment link in the same Partition as the given EquivalentTopLevelObjectType
		/// </summary>
		/// <param name="source">EquivalentTopLevelObjectType to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public EquivalentObjectTypeContainment(EquivalentTopLevelObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EquivalentObjectTypeContainment.ParentDomainRoleId, source), new DslModeling::RoleAssignment(EquivalentObjectTypeContainment.ChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EquivalentObjectTypeContainment(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EquivalentObjectTypeContainment(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EquivalentObjectTypeContainment(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EquivalentObjectTypeContainment(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0xa4002b62, 0xb41b, 0x438b, 0xa8, 0x76, 0x18, 0x4e, 0xa0, 0xd5, 0x13, 0x9e);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for unibz.ORMInferenceEngine.EquivalentObjectTypeContainment.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.EquivalentObjectTypeContainment/Parent.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.EquivalentObjectTypeContainment/Parent.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.EquivalentObjectTypeContainment/Parent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a4002b62-b41b-438b-a876-184ea0d5139e")]
		public EquivalentTopLevelObjectType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EquivalentTopLevelObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentCollection of a ObjectType
		/// <summary>
		/// Gets a list of ParentCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EquivalentTopLevelObjectType> GetParentCollection(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EquivalentTopLevelObjectType>, EquivalentTopLevelObjectType>(element, ChildDomainRoleId);
		}
		#endregion
		#region Child domain role code
		
		/// <summary>
		/// Child domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildDomainRoleId = new global::System.Guid(0xd9e57084, 0xcac5, 0x41e6, 0xa1, 0x77, 0x18, 0x48, 0x86, 0x20, 0x6b, 0x82);
		
		/// <summary>
		/// DomainRole Child
		/// Description for unibz.ORMInferenceEngine.EquivalentObjectTypeContainment.Child
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.EquivalentObjectTypeContainment/Child.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.EquivalentObjectTypeContainment/Child.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.EquivalentObjectTypeContainment/Child.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d9e57084-cac5-41e6-a177-184886206b82")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType Child
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildCollection of a EquivalentTopLevelObjectType
		/// <summary>
		/// Gets a list of ChildCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> GetChildCollection(EquivalentTopLevelObjectType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of EquivalentObjectTypeContainment links to a EquivalentTopLevelObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment> GetLinksToChildCollection ( global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment>(parentInstance, global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment.ParentDomainRoleId);
		}
		#endregion
		#region Child link accessor
		/// <summary>
		/// Get the list of EquivalentObjectTypeContainment links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment> GetLinksToParentCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType childInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment>(childInstance, global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment.ChildDomainRoleId);
		}
		#endregion
		#region EquivalentObjectTypeContainment instance accessors
		
		/// <summary>
		/// Get any EquivalentObjectTypeContainment links between a given EquivalentTopLevelObjectType and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment> GetLinks( global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment>(source, global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment.ParentDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment link in links )
			{
				if ( target.Equals(link.Child) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EquivalentObjectTypeContainment link between a given EquivalentTopLevelObjectTypeand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment GetLink( global::unibz.ORMInferenceEngine.EquivalentTopLevelObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment>(source, global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment.ParentDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.EquivalentObjectTypeContainment link in links )
			{
				if ( target.Equals(link.Child) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship DisjointTopLevelObjectType
	/// Description for unibz.ORMInferenceEngine.DisjointTopLevelObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.DisjointTopLevelObjectType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.DisjointTopLevelObjectType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("85392462-90aa-44b7-80e7-ae4ef339a7db")]
	public sealed partial class DisjointTopLevelObjectType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DisjointTopLevelObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x85392462, 0x90aa, 0x44b7, 0x80, 0xe7, 0xae, 0x4e, 0xf3, 0x39, 0xa7, 0xdb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DisjointTopLevelObjectType link in the same Partition as the given InferredHierarchy
		/// </summary>
		/// <param name="source">InferredHierarchy to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public DisjointTopLevelObjectType(InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DisjointTopLevelObjectType.InferredHierarchyDomainRoleId, source), new DslModeling::RoleAssignment(DisjointTopLevelObjectType.ObjectTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DisjointTopLevelObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DisjointTopLevelObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DisjointTopLevelObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DisjointTopLevelObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferredHierarchy domain role code
		
		/// <summary>
		/// InferredHierarchy domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferredHierarchyDomainRoleId = new global::System.Guid(0x96c59560, 0x9637, 0x4796, 0xba, 0x8e, 0x50, 0x06, 0xce, 0xd4, 0xce, 0x80);
		
		/// <summary>
		/// DomainRole InferredHierarchy
		/// Description for
		/// unibz.ORMInferenceEngine.DisjointTopLevelObjectType.InferredHierarchy
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.DisjointTopLevelObjectType/InferredHierarchy.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.DisjointTopLevelObjectType/InferredHierarchy.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DisjointTopObjectTypeCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.DisjointTopLevelObjectType/InferredHierarchy.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("96c59560-9637-4796-ba8e-5006ced4ce80")]
		public InferredHierarchy InferredHierarchy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredHierarchy)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferredHierarchyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferredHierarchyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferredHierarchy of a ObjectType
		/// <summary>
		/// Gets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InferredHierarchy GetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as InferredHierarchy;
		}
		
		/// <summary>
		/// Sets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element, InferredHierarchy newInferredHierarchy)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newInferredHierarchy);
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0x762ed875, 0x91a7, 0x4b67, 0x9b, 0xd4, 0x8a, 0xe5, 0x7d, 0xf7, 0x74, 0x3c);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for unibz.ORMInferenceEngine.DisjointTopLevelObjectType.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.DisjointTopLevelObjectType/ObjectType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.DisjointTopLevelObjectType/ObjectType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferredHierarchy", PropertyDisplayNameKey="unibz.ORMInferenceEngine.DisjointTopLevelObjectType/ObjectType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("762ed875-91a7-4b67-9bd4-8ae57df7743c")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DisjointTopObjectTypeCollection of a InferredHierarchy
		/// <summary>
		/// Gets a list of DisjointTopObjectTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> GetDisjointTopObjectTypeCollection(InferredHierarchy element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(element, InferredHierarchyDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ChildCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ChildCollection.
		/// Description for unibz.ORMInferenceEngine.DisjointObjectTypeContainment.Parent
		/// </summary>
		public DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> ChildCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment.ParentDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region InferredHierarchy link accessor
		/// <summary>
		/// Get the list of DisjointTopLevelObjectType links to a InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType> GetLinksToDisjointTopObjectTypeCollection ( global::unibz.ORMInferenceEngine.InferredHierarchy inferredHierarchyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType>(inferredHierarchyInstance, global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType.InferredHierarchyDomainRoleId);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the DisjointTopLevelObjectType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType GetLinkToInferredHierarchy (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType>(objectTypeInstance, global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DisjointTopLevelObjectType instance accessors
		
		/// <summary>
		/// Get any DisjointTopLevelObjectType links between a given InferredHierarchy and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType> GetLinks( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType>(source, global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DisjointTopLevelObjectType link between a given InferredHierarchyand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType GetLink( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType>(source, global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship DisjointObjectTypeContainment
	/// Description for unibz.ORMInferenceEngine.DisjointObjectTypeContainment
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.DisjointObjectTypeContainment.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.DisjointObjectTypeContainment.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("061f5ecb-459f-4edc-a611-b438435b9ba1")]
	public sealed partial class DisjointObjectTypeContainment : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DisjointObjectTypeContainment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x061f5ecb, 0x459f, 0x4edc, 0xa6, 0x11, 0xb4, 0x38, 0x43, 0x5b, 0x9b, 0xa1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DisjointObjectTypeContainment link in the same Partition as the given DisjointTopLevelObjectType
		/// </summary>
		/// <param name="source">DisjointTopLevelObjectType to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public DisjointObjectTypeContainment(DisjointTopLevelObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DisjointObjectTypeContainment.ParentDomainRoleId, source), new DslModeling::RoleAssignment(DisjointObjectTypeContainment.ChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DisjointObjectTypeContainment(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DisjointObjectTypeContainment(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DisjointObjectTypeContainment(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DisjointObjectTypeContainment(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0x8640554e, 0x369f, 0x4f5d, 0x97, 0xd4, 0x0d, 0xb0, 0xcc, 0xac, 0x5c, 0xce);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for unibz.ORMInferenceEngine.DisjointObjectTypeContainment.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.DisjointObjectTypeContainment/Parent.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.DisjointObjectTypeContainment/Parent.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.DisjointObjectTypeContainment/Parent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8640554e-369f-4f5d-97d4-0db0ccac5cce")]
		public DisjointTopLevelObjectType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DisjointTopLevelObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentCollection of a ObjectType
		/// <summary>
		/// Gets a list of ParentCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DisjointTopLevelObjectType> GetParentCollection(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DisjointTopLevelObjectType>, DisjointTopLevelObjectType>(element, ChildDomainRoleId);
		}
		#endregion
		#region Child domain role code
		
		/// <summary>
		/// Child domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildDomainRoleId = new global::System.Guid(0x3f402738, 0x7532, 0x4a70, 0x8c, 0x39, 0x4c, 0xd5, 0x3f, 0xb9, 0xe7, 0x67);
		
		/// <summary>
		/// DomainRole Child
		/// Description for unibz.ORMInferenceEngine.DisjointObjectTypeContainment.Child
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.DisjointObjectTypeContainment/Child.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.DisjointObjectTypeContainment/Child.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.DisjointObjectTypeContainment/Child.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3f402738-7532-4a70-8c39-4cd53fb9e767")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType Child
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildCollection of a DisjointTopLevelObjectType
		/// <summary>
		/// Gets a list of ChildCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> GetChildCollection(DisjointTopLevelObjectType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of DisjointObjectTypeContainment links to a DisjointTopLevelObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment> GetLinksToChildCollection ( global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment>(parentInstance, global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment.ParentDomainRoleId);
		}
		#endregion
		#region Child link accessor
		/// <summary>
		/// Get the list of DisjointObjectTypeContainment links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment> GetLinksToParentCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType childInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment>(childInstance, global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment.ChildDomainRoleId);
		}
		#endregion
		#region DisjointObjectTypeContainment instance accessors
		
		/// <summary>
		/// Get any DisjointObjectTypeContainment links between a given DisjointTopLevelObjectType and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment> GetLinks( global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment>(source, global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment.ParentDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment link in links )
			{
				if ( target.Equals(link.Child) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DisjointObjectTypeContainment link between a given DisjointTopLevelObjectTypeand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment GetLink( global::unibz.ORMInferenceEngine.DisjointTopLevelObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment>(source, global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment.ParentDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.DisjointObjectTypeContainment link in links )
			{
				if ( target.Equals(link.Child) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship ExhaustiveTopLevelObjectType
	/// Description for unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f7dbeefa-695a-48e9-8fe1-79ba0c8416d4")]
	public sealed partial class ExhaustiveTopLevelObjectType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExhaustiveTopLevelObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf7dbeefa, 0x695a, 0x48e9, 0x8f, 0xe1, 0x79, 0xba, 0x0c, 0x84, 0x16, 0xd4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExhaustiveTopLevelObjectType link in the same Partition as the given InferredHierarchy
		/// </summary>
		/// <param name="source">InferredHierarchy to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public ExhaustiveTopLevelObjectType(InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExhaustiveTopLevelObjectType.InferredHierarchyDomainRoleId, source), new DslModeling::RoleAssignment(ExhaustiveTopLevelObjectType.ObjectTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExhaustiveTopLevelObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExhaustiveTopLevelObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExhaustiveTopLevelObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExhaustiveTopLevelObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferredHierarchy domain role code
		
		/// <summary>
		/// InferredHierarchy domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferredHierarchyDomainRoleId = new global::System.Guid(0x0f2b672a, 0x3ae5, 0x452e, 0xb6, 0xbc, 0x71, 0xff, 0xa0, 0x84, 0xeb, 0x71);
		
		/// <summary>
		/// DomainRole InferredHierarchy
		/// Description for
		/// unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType.InferredHierarchy
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType/InferredHierarchy.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType/InferredHierarchy.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExhaustiveTopObjectTypeCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType/InferredHierarchy.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0f2b672a-3ae5-452e-b6bc-71ffa084eb71")]
		public InferredHierarchy InferredHierarchy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredHierarchy)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferredHierarchyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferredHierarchyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferredHierarchy of a ObjectType
		/// <summary>
		/// Gets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InferredHierarchy GetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as InferredHierarchy;
		}
		
		/// <summary>
		/// Sets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element, InferredHierarchy newInferredHierarchy)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newInferredHierarchy);
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xca58d5eb, 0x5b97, 0x4148, 0x97, 0x59, 0xcb, 0x8f, 0x3b, 0xc4, 0x12, 0x5a);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType/ObjectType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType/ObjectType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferredHierarchy", PropertyDisplayNameKey="unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType/ObjectType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ca58d5eb-5b97-4148-9759-cb8f3bc4125a")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExhaustiveTopObjectTypeCollection of a InferredHierarchy
		/// <summary>
		/// Gets a list of ExhaustiveTopObjectTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> GetExhaustiveTopObjectTypeCollection(InferredHierarchy element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(element, InferredHierarchyDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ChildCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ChildCollection.
		/// Description for unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment.Parent
		/// </summary>
		public DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> ChildCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment.ParentDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region InferredHierarchy link accessor
		/// <summary>
		/// Get the list of ExhaustiveTopLevelObjectType links to a InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType> GetLinksToExhaustiveTopObjectTypeCollection ( global::unibz.ORMInferenceEngine.InferredHierarchy inferredHierarchyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType>(inferredHierarchyInstance, global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType.InferredHierarchyDomainRoleId);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ExhaustiveTopLevelObjectType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType GetLinkToInferredHierarchy (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType>(objectTypeInstance, global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExhaustiveTopLevelObjectType instance accessors
		
		/// <summary>
		/// Get any ExhaustiveTopLevelObjectType links between a given InferredHierarchy and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType> GetLinks( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType>(source, global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExhaustiveTopLevelObjectType link between a given InferredHierarchyand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType GetLink( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType>(source, global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship ExhaustiveObjectTypeContainment
	/// Description for unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("74a6b9b8-b569-4316-98bb-48fdf76bd49e")]
	public sealed partial class ExhaustiveObjectTypeContainment : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExhaustiveObjectTypeContainment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x74a6b9b8, 0xb569, 0x4316, 0x98, 0xbb, 0x48, 0xfd, 0xf7, 0x6b, 0xd4, 0x9e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExhaustiveObjectTypeContainment link in the same Partition as the given ExhaustiveTopLevelObjectType
		/// </summary>
		/// <param name="source">ExhaustiveTopLevelObjectType to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public ExhaustiveObjectTypeContainment(ExhaustiveTopLevelObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExhaustiveObjectTypeContainment.ParentDomainRoleId, source), new DslModeling::RoleAssignment(ExhaustiveObjectTypeContainment.ChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExhaustiveObjectTypeContainment(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExhaustiveObjectTypeContainment(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExhaustiveObjectTypeContainment(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExhaustiveObjectTypeContainment(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0x200c2c05, 0xf6a3, 0x4d84, 0x9c, 0x20, 0xeb, 0xd0, 0x7b, 0x33, 0x72, 0x62);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment/Parent.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment/Parent.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment/Parent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("200c2c05-f6a3-4d84-9c20-ebd07b337262")]
		public ExhaustiveTopLevelObjectType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExhaustiveTopLevelObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentCollection of a ObjectType
		/// <summary>
		/// Gets a list of ParentCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ExhaustiveTopLevelObjectType> GetParentCollection(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ExhaustiveTopLevelObjectType>, ExhaustiveTopLevelObjectType>(element, ChildDomainRoleId);
		}
		#endregion
		#region Child domain role code
		
		/// <summary>
		/// Child domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildDomainRoleId = new global::System.Guid(0x4c7794f6, 0xa6af, 0x4fdc, 0xa4, 0xa5, 0x36, 0xe4, 0xa5, 0xee, 0x3b, 0x82);
		
		/// <summary>
		/// DomainRole Child
		/// Description for unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment.Child
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment/Child.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment/Child.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment/Child.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4c7794f6-a6af-4fdc-a4a5-36e4a5ee3b82")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType Child
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildCollection of a ExhaustiveTopLevelObjectType
		/// <summary>
		/// Gets a list of ChildCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType> GetChildCollection(ExhaustiveTopLevelObjectType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of ExhaustiveObjectTypeContainment links to a ExhaustiveTopLevelObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment> GetLinksToChildCollection ( global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment>(parentInstance, global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment.ParentDomainRoleId);
		}
		#endregion
		#region Child link accessor
		/// <summary>
		/// Get the list of ExhaustiveObjectTypeContainment links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment> GetLinksToParentCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType childInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment>(childInstance, global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment.ChildDomainRoleId);
		}
		#endregion
		#region ExhaustiveObjectTypeContainment instance accessors
		
		/// <summary>
		/// Get any ExhaustiveObjectTypeContainment links between a given ExhaustiveTopLevelObjectType and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment> GetLinks( global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment>(source, global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment.ParentDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment link in links )
			{
				if ( target.Equals(link.Child) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExhaustiveObjectTypeContainment link between a given ExhaustiveTopLevelObjectTypeand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment GetLink( global::unibz.ORMInferenceEngine.ExhaustiveTopLevelObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment>(source, global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment.ParentDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.ExhaustiveObjectTypeContainment link in links )
			{
				if ( target.Equals(link.Child) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship TopLevelFactType
	/// Description for unibz.ORMInferenceEngine.TopLevelFactType
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.TopLevelFactType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.TopLevelFactType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1265fc57-85be-44a1-b24d-e74cae0ed56e")]
	public sealed partial class TopLevelFactType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TopLevelFactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1265fc57, 0x85be, 0x44a1, 0xb2, 0x4d, 0xe7, 0x4c, 0xae, 0x0e, 0xd5, 0x6e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TopLevelFactType link in the same Partition as the given InferredHierarchy
		/// </summary>
		/// <param name="source">InferredHierarchy to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public TopLevelFactType(InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TopLevelFactType.InferredHierarchyDomainRoleId, source), new DslModeling::RoleAssignment(TopLevelFactType.FactTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TopLevelFactType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TopLevelFactType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TopLevelFactType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TopLevelFactType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferredHierarchy domain role code
		
		/// <summary>
		/// InferredHierarchy domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferredHierarchyDomainRoleId = new global::System.Guid(0x5ed4d563, 0xa2e4, 0x45d8, 0x9c, 0x50, 0x2d, 0x85, 0xd9, 0xbd, 0x0e, 0x39);
		
		/// <summary>
		/// DomainRole InferredHierarchy
		/// Description for unibz.ORMInferenceEngine.TopLevelFactType.InferredHierarchy
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.TopLevelFactType/InferredHierarchy.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.TopLevelFactType/InferredHierarchy.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TopFactTypeCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.TopLevelFactType/InferredHierarchy.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5ed4d563-a2e4-45d8-9c50-2d85d9bd0e39")]
		public InferredHierarchy InferredHierarchy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredHierarchy)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferredHierarchyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferredHierarchyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferredHierarchy of a FactType
		/// <summary>
		/// Gets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InferredHierarchy GetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as InferredHierarchy;
		}
		
		/// <summary>
		/// Sets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element, InferredHierarchy newInferredHierarchy)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newInferredHierarchy);
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0x336efa12, 0x3644, 0x486f, 0x88, 0xdd, 0x14, 0xb1, 0xee, 0xa3, 0x7f, 0xa7);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for unibz.ORMInferenceEngine.TopLevelFactType.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.TopLevelFactType/FactType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.TopLevelFactType/FactType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferredHierarchy", PropertyDisplayNameKey="unibz.ORMInferenceEngine.TopLevelFactType/FactType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("336efa12-3644-486f-88dd-14b1eea37fa7")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TopFactTypeCollection of a InferredHierarchy
		/// <summary>
		/// Gets a list of TopFactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType> GetTopFactTypeCollection(InferredHierarchy element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>(element, InferredHierarchyDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ChildCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ChildCollection.
		/// Description for unibz.ORMInferenceEngine.FactTypeContainment.Parent
		/// </summary>
		public DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType> ChildCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>(global::unibz.ORMInferenceEngine.FactTypeContainment.ParentDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region InferredHierarchy link accessor
		/// <summary>
		/// Get the list of TopLevelFactType links to a InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.TopLevelFactType> GetLinksToTopFactTypeCollection ( global::unibz.ORMInferenceEngine.InferredHierarchy inferredHierarchyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.TopLevelFactType>(inferredHierarchyInstance, global::unibz.ORMInferenceEngine.TopLevelFactType.InferredHierarchyDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the TopLevelFactType link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.TopLevelFactType GetLinkToInferredHierarchy (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.TopLevelFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.TopLevelFactType>(factTypeInstance, global::unibz.ORMInferenceEngine.TopLevelFactType.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TopLevelFactType instance accessors
		
		/// <summary>
		/// Get any TopLevelFactType links between a given InferredHierarchy and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.TopLevelFactType> GetLinks( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.TopLevelFactType> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.TopLevelFactType>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.TopLevelFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.TopLevelFactType>(source, global::unibz.ORMInferenceEngine.TopLevelFactType.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.TopLevelFactType link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TopLevelFactType link between a given InferredHierarchyand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.TopLevelFactType GetLink( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.TopLevelFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.TopLevelFactType>(source, global::unibz.ORMInferenceEngine.TopLevelFactType.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.TopLevelFactType link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship FactTypeContainment
	/// Description for unibz.ORMInferenceEngine.FactTypeContainment
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.FactTypeContainment.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.FactTypeContainment.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("68a72408-a5b8-42e6-9c54-56e10fe86d7e")]
	public sealed partial class FactTypeContainment : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeContainment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x68a72408, 0xa5b8, 0x42e6, 0x9c, 0x54, 0x56, 0xe1, 0x0f, 0xe8, 0x6d, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeContainment link in the same Partition as the given TopLevelFactType
		/// </summary>
		/// <param name="source">TopLevelFactType to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public FactTypeContainment(TopLevelFactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeContainment.ParentDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeContainment.ChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeContainment(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeContainment(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeContainment(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeContainment(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0x2c3b8098, 0x25b9, 0x434c, 0xa7, 0x39, 0xb0, 0xd5, 0x9d, 0x89, 0x14, 0x02);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for unibz.ORMInferenceEngine.FactTypeContainment.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.FactTypeContainment/Parent.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.FactTypeContainment/Parent.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.FactTypeContainment/Parent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2c3b8098-25b9-434c-a739-b0d59d891402")]
		public TopLevelFactType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TopLevelFactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentCollection of a FactType
		/// <summary>
		/// Gets a list of ParentCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TopLevelFactType> GetParentCollection(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TopLevelFactType>, TopLevelFactType>(element, ChildDomainRoleId);
		}
		#endregion
		#region Child domain role code
		
		/// <summary>
		/// Child domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildDomainRoleId = new global::System.Guid(0xdf333310, 0xf649, 0x4d8c, 0x88, 0x8e, 0xdb, 0x44, 0xd8, 0x33, 0x93, 0xf2);
		
		/// <summary>
		/// DomainRole Child
		/// Description for unibz.ORMInferenceEngine.FactTypeContainment.Child
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.FactTypeContainment/Child.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.FactTypeContainment/Child.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.FactTypeContainment/Child.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("df333310-f649-4d8c-888e-db44d83393f2")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType Child
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildCollection of a TopLevelFactType
		/// <summary>
		/// Gets a list of ChildCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType> GetChildCollection(TopLevelFactType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of FactTypeContainment links to a TopLevelFactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.FactTypeContainment> GetLinksToChildCollection ( global::unibz.ORMInferenceEngine.TopLevelFactType parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.FactTypeContainment>(parentInstance, global::unibz.ORMInferenceEngine.FactTypeContainment.ParentDomainRoleId);
		}
		#endregion
		#region Child link accessor
		/// <summary>
		/// Get the list of FactTypeContainment links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.FactTypeContainment> GetLinksToParentCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType childInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.FactTypeContainment>(childInstance, global::unibz.ORMInferenceEngine.FactTypeContainment.ChildDomainRoleId);
		}
		#endregion
		#region FactTypeContainment instance accessors
		
		/// <summary>
		/// Get any FactTypeContainment links between a given TopLevelFactType and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.FactTypeContainment> GetLinks( global::unibz.ORMInferenceEngine.TopLevelFactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.FactTypeContainment> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.FactTypeContainment>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.FactTypeContainment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.FactTypeContainment>(source, global::unibz.ORMInferenceEngine.FactTypeContainment.ParentDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.FactTypeContainment link in links )
			{
				if ( target.Equals(link.Child) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeContainment link between a given TopLevelFactTypeand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.FactTypeContainment GetLink( global::unibz.ORMInferenceEngine.TopLevelFactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.FactTypeContainment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.FactTypeContainment>(source, global::unibz.ORMInferenceEngine.FactTypeContainment.ParentDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.FactTypeContainment link in links )
			{
				if ( target.Equals(link.Child) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship EquivalentTopLevelFactType
	/// Description for unibz.ORMInferenceEngine.EquivalentTopLevelFactType
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.EquivalentTopLevelFactType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.EquivalentTopLevelFactType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d0c3ac39-55a5-4574-901b-08b57295c010")]
	public sealed partial class EquivalentTopLevelFactType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EquivalentTopLevelFactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd0c3ac39, 0x55a5, 0x4574, 0x90, 0x1b, 0x08, 0xb5, 0x72, 0x95, 0xc0, 0x10);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EquivalentTopLevelFactType link in the same Partition as the given InferredHierarchy
		/// </summary>
		/// <param name="source">InferredHierarchy to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public EquivalentTopLevelFactType(InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EquivalentTopLevelFactType.InferredHierarchyDomainRoleId, source), new DslModeling::RoleAssignment(EquivalentTopLevelFactType.FactTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EquivalentTopLevelFactType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EquivalentTopLevelFactType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EquivalentTopLevelFactType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EquivalentTopLevelFactType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferredHierarchy domain role code
		
		/// <summary>
		/// InferredHierarchy domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferredHierarchyDomainRoleId = new global::System.Guid(0x4a1b5d7f, 0x6dcc, 0x4870, 0xbb, 0x53, 0xe6, 0xec, 0x3d, 0x69, 0xd0, 0x97);
		
		/// <summary>
		/// DomainRole InferredHierarchy
		/// Description for
		/// unibz.ORMInferenceEngine.EquivalentTopLevelFactType.InferredHierarchy
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.EquivalentTopLevelFactType/InferredHierarchy.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.EquivalentTopLevelFactType/InferredHierarchy.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EquivalentTopFactTypeCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.EquivalentTopLevelFactType/InferredHierarchy.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4a1b5d7f-6dcc-4870-bb53-e6ec3d69d097")]
		public InferredHierarchy InferredHierarchy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredHierarchy)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferredHierarchyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferredHierarchyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferredHierarchy of a FactType
		/// <summary>
		/// Gets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InferredHierarchy GetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as InferredHierarchy;
		}
		
		/// <summary>
		/// Sets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element, InferredHierarchy newInferredHierarchy)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newInferredHierarchy);
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0x45136ce1, 0x9c94, 0x48c5, 0x98, 0x0f, 0x26, 0x63, 0x42, 0x02, 0x51, 0xc5);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for unibz.ORMInferenceEngine.EquivalentTopLevelFactType.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.EquivalentTopLevelFactType/FactType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.EquivalentTopLevelFactType/FactType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferredHierarchy", PropertyDisplayNameKey="unibz.ORMInferenceEngine.EquivalentTopLevelFactType/FactType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("45136ce1-9c94-48c5-980f-2663420251c5")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EquivalentTopFactTypeCollection of a InferredHierarchy
		/// <summary>
		/// Gets a list of EquivalentTopFactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType> GetEquivalentTopFactTypeCollection(InferredHierarchy element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>(element, InferredHierarchyDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ChildCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ChildCollection.
		/// Description for unibz.ORMInferenceEngine.EquivalentFactTypeContainment.Parent
		/// </summary>
		public DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType> ChildCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>(global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment.ParentDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region InferredHierarchy link accessor
		/// <summary>
		/// Get the list of EquivalentTopLevelFactType links to a InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType> GetLinksToEquivalentTopFactTypeCollection ( global::unibz.ORMInferenceEngine.InferredHierarchy inferredHierarchyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType>(inferredHierarchyInstance, global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType.InferredHierarchyDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the EquivalentTopLevelFactType link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType GetLinkToInferredHierarchy (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType>(factTypeInstance, global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EquivalentTopLevelFactType instance accessors
		
		/// <summary>
		/// Get any EquivalentTopLevelFactType links between a given InferredHierarchy and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType> GetLinks( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType>(source, global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EquivalentTopLevelFactType link between a given InferredHierarchyand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType GetLink( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType>(source, global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship EquivalentFactTypeContainment
	/// Description for unibz.ORMInferenceEngine.EquivalentFactTypeContainment
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.EquivalentFactTypeContainment.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.EquivalentFactTypeContainment.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("94cd5586-3567-48a8-9774-1d4c5bfcc4ca")]
	public sealed partial class EquivalentFactTypeContainment : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EquivalentFactTypeContainment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x94cd5586, 0x3567, 0x48a8, 0x97, 0x74, 0x1d, 0x4c, 0x5b, 0xfc, 0xc4, 0xca);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EquivalentFactTypeContainment link in the same Partition as the given EquivalentTopLevelFactType
		/// </summary>
		/// <param name="source">EquivalentTopLevelFactType to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public EquivalentFactTypeContainment(EquivalentTopLevelFactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EquivalentFactTypeContainment.ParentDomainRoleId, source), new DslModeling::RoleAssignment(EquivalentFactTypeContainment.ChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EquivalentFactTypeContainment(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EquivalentFactTypeContainment(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EquivalentFactTypeContainment(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EquivalentFactTypeContainment(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0xd156d616, 0x9010, 0x4b0a, 0xb4, 0x94, 0xf6, 0xfd, 0x69, 0xad, 0x61, 0x4a);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for unibz.ORMInferenceEngine.EquivalentFactTypeContainment.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.EquivalentFactTypeContainment/Parent.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.EquivalentFactTypeContainment/Parent.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.EquivalentFactTypeContainment/Parent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d156d616-9010-4b0a-b494-f6fd69ad614a")]
		public EquivalentTopLevelFactType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EquivalentTopLevelFactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentCollection of a FactType
		/// <summary>
		/// Gets a list of ParentCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EquivalentTopLevelFactType> GetParentCollection(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EquivalentTopLevelFactType>, EquivalentTopLevelFactType>(element, ChildDomainRoleId);
		}
		#endregion
		#region Child domain role code
		
		/// <summary>
		/// Child domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildDomainRoleId = new global::System.Guid(0xa505e112, 0x3b88, 0x4eb9, 0x90, 0xe3, 0x19, 0xd4, 0x4f, 0x22, 0x7d, 0x76);
		
		/// <summary>
		/// DomainRole Child
		/// Description for unibz.ORMInferenceEngine.EquivalentFactTypeContainment.Child
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.EquivalentFactTypeContainment/Child.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.EquivalentFactTypeContainment/Child.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.EquivalentFactTypeContainment/Child.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a505e112-3b88-4eb9-90e3-19d44f227d76")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType Child
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildCollection of a EquivalentTopLevelFactType
		/// <summary>
		/// Gets a list of ChildCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType> GetChildCollection(EquivalentTopLevelFactType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of EquivalentFactTypeContainment links to a EquivalentTopLevelFactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment> GetLinksToChildCollection ( global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment>(parentInstance, global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment.ParentDomainRoleId);
		}
		#endregion
		#region Child link accessor
		/// <summary>
		/// Get the list of EquivalentFactTypeContainment links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment> GetLinksToParentCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType childInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment>(childInstance, global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment.ChildDomainRoleId);
		}
		#endregion
		#region EquivalentFactTypeContainment instance accessors
		
		/// <summary>
		/// Get any EquivalentFactTypeContainment links between a given EquivalentTopLevelFactType and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment> GetLinks( global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment>(source, global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment.ParentDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment link in links )
			{
				if ( target.Equals(link.Child) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EquivalentFactTypeContainment link between a given EquivalentTopLevelFactTypeand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment GetLink( global::unibz.ORMInferenceEngine.EquivalentTopLevelFactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment>(source, global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment.ParentDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.EquivalentFactTypeContainment link in links )
			{
				if ( target.Equals(link.Child) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship DisjointTopLevelFactType
	/// Description for unibz.ORMInferenceEngine.DisjointTopLevelFactType
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.DisjointTopLevelFactType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.DisjointTopLevelFactType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3a48b48c-d5cc-4e98-8b6d-ec4d426e2c2f")]
	public sealed partial class DisjointTopLevelFactType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DisjointTopLevelFactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3a48b48c, 0xd5cc, 0x4e98, 0x8b, 0x6d, 0xec, 0x4d, 0x42, 0x6e, 0x2c, 0x2f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DisjointTopLevelFactType link in the same Partition as the given InferredHierarchy
		/// </summary>
		/// <param name="source">InferredHierarchy to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public DisjointTopLevelFactType(InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DisjointTopLevelFactType.InferredHierarchyDomainRoleId, source), new DslModeling::RoleAssignment(DisjointTopLevelFactType.FactTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DisjointTopLevelFactType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DisjointTopLevelFactType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DisjointTopLevelFactType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DisjointTopLevelFactType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferredHierarchy domain role code
		
		/// <summary>
		/// InferredHierarchy domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferredHierarchyDomainRoleId = new global::System.Guid(0xdd99b3cd, 0x7280, 0x4774, 0x87, 0xff, 0x49, 0xf3, 0xc7, 0x11, 0xc7, 0x15);
		
		/// <summary>
		/// DomainRole InferredHierarchy
		/// Description for
		/// unibz.ORMInferenceEngine.DisjointTopLevelFactType.InferredHierarchy
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.DisjointTopLevelFactType/InferredHierarchy.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.DisjointTopLevelFactType/InferredHierarchy.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DisjointTopFactTypeCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.DisjointTopLevelFactType/InferredHierarchy.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dd99b3cd-7280-4774-87ff-49f3c711c715")]
		public InferredHierarchy InferredHierarchy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredHierarchy)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferredHierarchyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferredHierarchyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferredHierarchy of a FactType
		/// <summary>
		/// Gets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InferredHierarchy GetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as InferredHierarchy;
		}
		
		/// <summary>
		/// Sets InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInferredHierarchy(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element, InferredHierarchy newInferredHierarchy)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newInferredHierarchy);
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xefda17d8, 0x16fd, 0x49ec, 0x80, 0x17, 0xd0, 0x81, 0xee, 0x41, 0x06, 0x9c);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for unibz.ORMInferenceEngine.DisjointTopLevelFactType.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.DisjointTopLevelFactType/FactType.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.DisjointTopLevelFactType/FactType.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferredHierarchy", PropertyDisplayNameKey="unibz.ORMInferenceEngine.DisjointTopLevelFactType/FactType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("efda17d8-16fd-49ec-8017-d081ee41069c")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DisjointTopFactTypeCollection of a InferredHierarchy
		/// <summary>
		/// Gets a list of DisjointTopFactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType> GetDisjointTopFactTypeCollection(InferredHierarchy element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>(element, InferredHierarchyDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ChildCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ChildCollection.
		/// Description for unibz.ORMInferenceEngine.DisjointFactTypeContainment.Parent
		/// </summary>
		public DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType> ChildCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>(global::unibz.ORMInferenceEngine.DisjointFactTypeContainment.ParentDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region InferredHierarchy link accessor
		/// <summary>
		/// Get the list of DisjointTopLevelFactType links to a InferredHierarchy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.DisjointTopLevelFactType> GetLinksToDisjointTopFactTypeCollection ( global::unibz.ORMInferenceEngine.InferredHierarchy inferredHierarchyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointTopLevelFactType>(inferredHierarchyInstance, global::unibz.ORMInferenceEngine.DisjointTopLevelFactType.InferredHierarchyDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the DisjointTopLevelFactType link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.DisjointTopLevelFactType GetLinkToInferredHierarchy (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.DisjointTopLevelFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointTopLevelFactType>(factTypeInstance, global::unibz.ORMInferenceEngine.DisjointTopLevelFactType.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DisjointTopLevelFactType instance accessors
		
		/// <summary>
		/// Get any DisjointTopLevelFactType links between a given InferredHierarchy and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.DisjointTopLevelFactType> GetLinks( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.DisjointTopLevelFactType> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.DisjointTopLevelFactType>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.DisjointTopLevelFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointTopLevelFactType>(source, global::unibz.ORMInferenceEngine.DisjointTopLevelFactType.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.DisjointTopLevelFactType link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DisjointTopLevelFactType link between a given InferredHierarchyand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.DisjointTopLevelFactType GetLink( global::unibz.ORMInferenceEngine.InferredHierarchy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.DisjointTopLevelFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointTopLevelFactType>(source, global::unibz.ORMInferenceEngine.DisjointTopLevelFactType.InferredHierarchyDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.DisjointTopLevelFactType link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship DisjointFactTypeContainment
	/// Description for unibz.ORMInferenceEngine.DisjointFactTypeContainment
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.DisjointFactTypeContainment.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.DisjointFactTypeContainment.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e03481b2-8c07-417b-87f0-e97c84b9e8b2")]
	public sealed partial class DisjointFactTypeContainment : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DisjointFactTypeContainment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe03481b2, 0x8c07, 0x417b, 0x87, 0xf0, 0xe9, 0x7c, 0x84, 0xb9, 0xe8, 0xb2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DisjointFactTypeContainment link in the same Partition as the given DisjointTopLevelFactType
		/// </summary>
		/// <param name="source">DisjointTopLevelFactType to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public DisjointFactTypeContainment(DisjointTopLevelFactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DisjointFactTypeContainment.ParentDomainRoleId, source), new DslModeling::RoleAssignment(DisjointFactTypeContainment.ChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DisjointFactTypeContainment(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DisjointFactTypeContainment(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DisjointFactTypeContainment(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DisjointFactTypeContainment(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0x66b3e904, 0xe253, 0x4412, 0xb7, 0xb8, 0x2c, 0x25, 0xbd, 0x8b, 0xe4, 0xd3);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for unibz.ORMInferenceEngine.DisjointFactTypeContainment.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.DisjointFactTypeContainment/Parent.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.DisjointFactTypeContainment/Parent.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.DisjointFactTypeContainment/Parent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("66b3e904-e253-4412-b7b8-2c25bd8be4d3")]
		public DisjointTopLevelFactType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DisjointTopLevelFactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentCollection of a FactType
		/// <summary>
		/// Gets a list of ParentCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DisjointTopLevelFactType> GetParentCollection(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DisjointTopLevelFactType>, DisjointTopLevelFactType>(element, ChildDomainRoleId);
		}
		#endregion
		#region Child domain role code
		
		/// <summary>
		/// Child domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildDomainRoleId = new global::System.Guid(0xe029ed30, 0xd5c4, 0x475d, 0xb3, 0xa7, 0x78, 0x07, 0xdc, 0x36, 0xe9, 0x37);
		
		/// <summary>
		/// DomainRole Child
		/// Description for unibz.ORMInferenceEngine.DisjointFactTypeContainment.Child
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.DisjointFactTypeContainment/Child.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.DisjointFactTypeContainment/Child.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.DisjointFactTypeContainment/Child.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e029ed30-d5c4-475d-b3a7-7807dc36e937")]
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType Child
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildCollection of a DisjointTopLevelFactType
		/// <summary>
		/// Gets a list of ChildCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType> GetChildCollection(DisjointTopLevelFactType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of DisjointFactTypeContainment links to a DisjointTopLevelFactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.DisjointFactTypeContainment> GetLinksToChildCollection ( global::unibz.ORMInferenceEngine.DisjointTopLevelFactType parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointFactTypeContainment>(parentInstance, global::unibz.ORMInferenceEngine.DisjointFactTypeContainment.ParentDomainRoleId);
		}
		#endregion
		#region Child link accessor
		/// <summary>
		/// Get the list of DisjointFactTypeContainment links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.DisjointFactTypeContainment> GetLinksToParentCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType childInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointFactTypeContainment>(childInstance, global::unibz.ORMInferenceEngine.DisjointFactTypeContainment.ChildDomainRoleId);
		}
		#endregion
		#region DisjointFactTypeContainment instance accessors
		
		/// <summary>
		/// Get any DisjointFactTypeContainment links between a given DisjointTopLevelFactType and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.DisjointFactTypeContainment> GetLinks( global::unibz.ORMInferenceEngine.DisjointTopLevelFactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.DisjointFactTypeContainment> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.DisjointFactTypeContainment>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.DisjointFactTypeContainment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointFactTypeContainment>(source, global::unibz.ORMInferenceEngine.DisjointFactTypeContainment.ParentDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.DisjointFactTypeContainment link in links )
			{
				if ( target.Equals(link.Child) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DisjointFactTypeContainment link between a given DisjointTopLevelFactTypeand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.DisjointFactTypeContainment GetLink( global::unibz.ORMInferenceEngine.DisjointTopLevelFactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.DisjointFactTypeContainment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.DisjointFactTypeContainment>(source, global::unibz.ORMInferenceEngine.DisjointFactTypeContainment.ParentDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.DisjointFactTypeContainment link in links )
			{
				if ( target.Equals(link.Child) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship InferenceResultTargetsORMModel
	/// Description for unibz.ORMInferenceEngine.InferenceResultTargetsORMModel
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferenceResultTargetsORMModel.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferenceResultTargetsORMModel.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("89794b64-fa2a-40eb-bb70-ed24b737788f")]
	public partial class InferenceResultTargetsORMModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InferenceResultTargetsORMModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x89794b64, 0xfa2a, 0x40eb, 0xbb, 0x70, 0xed, 0x24, 0xb7, 0x37, 0x78, 0x8f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InferenceResultTargetsORMModel link in the same Partition as the given InferenceResult
		/// </summary>
		/// <param name="source">InferenceResult to use as the source of the relationship.</param>
		/// <param name="target">ORMModel to use as the target of the relationship.</param>
		public InferenceResultTargetsORMModel(InferenceResult source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InferenceResultTargetsORMModel.InferenceResultDomainRoleId, source), new DslModeling::RoleAssignment(InferenceResultTargetsORMModel.ORMModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InferenceResultTargetsORMModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InferenceResultTargetsORMModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InferenceResultTargetsORMModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InferenceResultTargetsORMModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferenceResult domain role code
		
		/// <summary>
		/// InferenceResult domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferenceResultDomainRoleId = new global::System.Guid(0x8b85f422, 0x91d5, 0x412c, 0x90, 0x9c, 0x20, 0x09, 0x41, 0x06, 0x4a, 0x1a);
		
		/// <summary>
		/// DomainRole InferenceResult
		/// Description for
		/// unibz.ORMInferenceEngine.InferenceResultTargetsORMModel.InferenceResult
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferenceResultTargetsORMModel/InferenceResult.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferenceResultTargetsORMModel/InferenceResult.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Model", PropertyDisplayNameKey="unibz.ORMInferenceEngine.InferenceResultTargetsORMModel/InferenceResult.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8b85f422-91d5-412c-909c-200941064a1a")]
		public virtual InferenceResult InferenceResult
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferenceResult)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferenceResultDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferenceResultDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferenceResult of a ORMModel
		/// <summary>
		/// Gets a list of InferenceResult.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InferenceResult> GetInferenceResult(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<InferenceResult>, InferenceResult>(element, ORMModelDomainRoleId);
		}
		#endregion
		#region ORMModel domain role code
		
		/// <summary>
		/// ORMModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ORMModelDomainRoleId = new global::System.Guid(0x4bfa395c, 0xa15e, 0x4160, 0x9e, 0x29, 0xcd, 0xe6, 0x58, 0xd7, 0x6d, 0x88);
		
		/// <summary>
		/// DomainRole ORMModel
		/// Description for unibz.ORMInferenceEngine.InferenceResultTargetsORMModel.ORMModel
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferenceResultTargetsORMModel/ORMModel.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferenceResultTargetsORMModel/ORMModel.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferenceResult", PropertyDisplayNameKey="unibz.ORMInferenceEngine.InferenceResultTargetsORMModel/ORMModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4bfa395c-a15e-4160-9e29-cde658d76d88")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel ORMModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ORMModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ORMModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a InferenceResult
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel GetModel(InferenceResult element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InferenceResultDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(InferenceResult element, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel newORMModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InferenceResultDomainRoleId, newORMModel);
		}
		#endregion
		#region InferenceResult link accessor
		/// <summary>
		/// Get the InferenceResultTargetsORMModel link to a InferenceResult.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel GetLinkToModel (global::unibz.ORMInferenceEngine.InferenceResult inferenceResultInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel>(inferenceResultInstance, global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel.InferenceResultDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InferenceResult not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ORMModel link accessor
		/// <summary>
		/// Get the list of InferenceResultTargetsORMModel links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel> GetLinksToInferenceResult ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel oRMModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel>(oRMModelInstance, global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel.ORMModelDomainRoleId);
		}
		#endregion
		#region InferenceResultTargetsORMModel instance accessors
		
		/// <summary>
		/// Get any InferenceResultTargetsORMModel links between a given InferenceResult and a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel> GetLinks( global::unibz.ORMInferenceEngine.InferenceResult source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel>(source, global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel.InferenceResultDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InferenceResultTargetsORMModel link between a given InferenceResultand a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel GetLink( global::unibz.ORMInferenceEngine.InferenceResult source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel>(source, global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel.InferenceResultDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship InferredConstraintsTargetORMModel
	/// Description for unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("12f9390d-0b1b-4c20-8ae9-cd31a24638f4")]
	public partial class InferredConstraintsTargetORMModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InferredConstraintsTargetORMModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x12f9390d, 0x0b1b, 0x4c20, 0x8a, 0xe9, 0xcd, 0x31, 0xa2, 0x46, 0x38, 0xf4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InferredConstraintsTargetORMModel link in the same Partition as the given InferredConstraints
		/// </summary>
		/// <param name="source">InferredConstraints to use as the source of the relationship.</param>
		/// <param name="target">ORMModel to use as the target of the relationship.</param>
		public InferredConstraintsTargetORMModel(InferredConstraints source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InferredConstraintsTargetORMModel.InferredConstraintsDomainRoleId, source), new DslModeling::RoleAssignment(InferredConstraintsTargetORMModel.ORMModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InferredConstraintsTargetORMModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InferredConstraintsTargetORMModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InferredConstraintsTargetORMModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InferredConstraintsTargetORMModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferredConstraints domain role code
		
		/// <summary>
		/// InferredConstraints domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferredConstraintsDomainRoleId = new global::System.Guid(0x44af5552, 0x43e4, 0x4159, 0xa0, 0x44, 0xff, 0x3f, 0x01, 0x8a, 0x8f, 0x09);
		
		/// <summary>
		/// DomainRole InferredConstraints
		/// Description for
		/// unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel.InferredConstraints
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel/InferredConstraints.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel/InferredConstraints.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Model", PropertyDisplayNameKey="unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel/InferredConstraints.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("44af5552-43e4-4159-a044-ff3f018a8f09")]
		public virtual InferredConstraints InferredConstraints
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredConstraints)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferredConstraintsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferredConstraintsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferredConstraints of a ORMModel
		/// <summary>
		/// Gets InferredConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InferredConstraints GetInferredConstraints(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ORMModelDomainRoleId) as InferredConstraints;
		}
		
		/// <summary>
		/// Sets InferredConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInferredConstraints(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel element, InferredConstraints newInferredConstraints)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ORMModelDomainRoleId, newInferredConstraints);
		}
		#endregion
		#region ORMModel domain role code
		
		/// <summary>
		/// ORMModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ORMModelDomainRoleId = new global::System.Guid(0xbc2cf0cd, 0xafd2, 0x428b, 0xb4, 0x7a, 0xfe, 0xa5, 0x3b, 0xb0, 0x11, 0xe8);
		
		/// <summary>
		/// DomainRole ORMModel
		/// Description for
		/// unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel.ORMModel
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel/ORMModel.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel/ORMModel.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferredConstraints", PropertyDisplayNameKey="unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel/ORMModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("bc2cf0cd-afd2-428b-b47a-fea53bb011e8")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel ORMModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ORMModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ORMModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a InferredConstraints
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel GetModel(InferredConstraints element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InferredConstraintsDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(InferredConstraints element, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel newORMModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InferredConstraintsDomainRoleId, newORMModel);
		}
		#endregion
		#region InferredConstraints link accessor
		/// <summary>
		/// Get the InferredConstraintsTargetORMModel link to a InferredConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel GetLinkToModel (global::unibz.ORMInferenceEngine.InferredConstraints inferredConstraintsInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel>(inferredConstraintsInstance, global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel.InferredConstraintsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InferredConstraints not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ORMModel link accessor
		/// <summary>
		/// Get the InferredConstraintsTargetORMModel link to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel GetLinkToInferredConstraints (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel oRMModelInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel>(oRMModelInstance, global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel.ORMModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ORMModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InferredConstraintsTargetORMModel instance accessors
		
		/// <summary>
		/// Get any InferredConstraintsTargetORMModel links between a given InferredConstraints and a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel> GetLinks( global::unibz.ORMInferenceEngine.InferredConstraints source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel>(source, global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel.InferredConstraintsDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InferredConstraintsTargetORMModel link between a given InferredConstraintsand a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel GetLink( global::unibz.ORMInferenceEngine.InferredConstraints source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel>(source, global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel.InferredConstraintsDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship SetConstraintIsInferred
	/// Description for unibz.ORMInferenceEngine.SetConstraintIsInferred
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.SetConstraintIsInferred.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.SetConstraintIsInferred.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d4b6f130-6a77-4454-9c45-0088626d2843")]
	public partial class SetConstraintIsInferred : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetConstraintIsInferred domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd4b6f130, 0x6a77, 0x4454, 0x9c, 0x45, 0x00, 0x88, 0x62, 0x6d, 0x28, 0x43);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetConstraintIsInferred link in the same Partition as the given InferredConstraints
		/// </summary>
		/// <param name="source">InferredConstraints to use as the source of the relationship.</param>
		/// <param name="target">SetConstraint to use as the target of the relationship.</param>
		public SetConstraintIsInferred(InferredConstraints source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetConstraintIsInferred.InferredConstraintsDomainRoleId, source), new DslModeling::RoleAssignment(SetConstraintIsInferred.SetConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintIsInferred(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintIsInferred(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintIsInferred(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintIsInferred(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferredConstraints domain role code
		
		/// <summary>
		/// InferredConstraints domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferredConstraintsDomainRoleId = new global::System.Guid(0x938497e3, 0xc3a4, 0x4754, 0x93, 0x82, 0x23, 0x32, 0x43, 0xca, 0xe5, 0x27);
		
		/// <summary>
		/// DomainRole InferredConstraints
		/// Description for
		/// unibz.ORMInferenceEngine.SetConstraintIsInferred.InferredConstraints
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.SetConstraintIsInferred/InferredConstraints.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.SetConstraintIsInferred/InferredConstraints.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SetConstraintCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.SetConstraintIsInferred/InferredConstraints.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("938497e3-c3a4-4754-9382-233243cae527")]
		public virtual InferredConstraints InferredConstraints
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredConstraints)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferredConstraintsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferredConstraintsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferredConstraints of a SetConstraint
		/// <summary>
		/// Gets InferredConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InferredConstraints GetInferredConstraints(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetConstraintDomainRoleId) as InferredConstraints;
		}
		
		/// <summary>
		/// Sets InferredConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInferredConstraints(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint element, InferredConstraints newInferredConstraints)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetConstraintDomainRoleId, newInferredConstraints);
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0xd10e1f9c, 0x4626, 0x47bb, 0x9a, 0x60, 0x02, 0xb8, 0x56, 0xb3, 0x7e, 0x33);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for unibz.ORMInferenceEngine.SetConstraintIsInferred.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.SetConstraintIsInferred/SetConstraint.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.SetConstraintIsInferred/SetConstraint.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferredConstraints", PropertyDisplayNameKey="unibz.ORMInferenceEngine.SetConstraintIsInferred/SetConstraint.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("d10e1f9c-4626-47bb-9a60-02b856b37e33")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraintCollection of a InferredConstraints
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint> GetSetConstraintCollection(InferredConstraints element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint>(element, InferredConstraintsDomainRoleId);
		}
		#endregion
		#region InferredConstraints link accessor
		/// <summary>
		/// Get the list of SetConstraintIsInferred links to a InferredConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.SetConstraintIsInferred> GetLinksToSetConstraintCollection ( global::unibz.ORMInferenceEngine.InferredConstraints inferredConstraintsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.SetConstraintIsInferred>(inferredConstraintsInstance, global::unibz.ORMInferenceEngine.SetConstraintIsInferred.InferredConstraintsDomainRoleId);
		}
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the SetConstraintIsInferred link to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.SetConstraintIsInferred GetLinkToInferredConstraints (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint setConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.SetConstraintIsInferred> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.SetConstraintIsInferred>(setConstraintInstance, global::unibz.ORMInferenceEngine.SetConstraintIsInferred.SetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetConstraintIsInferred instance accessors
		
		/// <summary>
		/// Get any SetConstraintIsInferred links between a given InferredConstraints and a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.SetConstraintIsInferred> GetLinks( global::unibz.ORMInferenceEngine.InferredConstraints source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.SetConstraintIsInferred> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.SetConstraintIsInferred>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.SetConstraintIsInferred> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.SetConstraintIsInferred>(source, global::unibz.ORMInferenceEngine.SetConstraintIsInferred.InferredConstraintsDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.SetConstraintIsInferred link in links )
			{
				if ( target.Equals(link.SetConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetConstraintIsInferred link between a given InferredConstraintsand a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.SetConstraintIsInferred GetLink( global::unibz.ORMInferenceEngine.InferredConstraints source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.SetConstraintIsInferred> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.SetConstraintIsInferred>(source, global::unibz.ORMInferenceEngine.SetConstraintIsInferred.InferredConstraintsDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.SetConstraintIsInferred link in links )
			{
				if ( target.Equals(link.SetConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintIsInferred
	/// Description for unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fe83fc21-1a41-4298-945f-a0670c64e2a0")]
	public partial class SetComparisonConstraintIsInferred : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintIsInferred domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfe83fc21, 0x1a41, 0x4298, 0x94, 0x5f, 0xa0, 0x67, 0x0c, 0x64, 0xe2, 0xa0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintIsInferred link in the same Partition as the given InferredConstraints
		/// </summary>
		/// <param name="source">InferredConstraints to use as the source of the relationship.</param>
		/// <param name="target">SetComparisonConstraint to use as the target of the relationship.</param>
		public SetComparisonConstraintIsInferred(InferredConstraints source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintIsInferred.InferredConstraintsDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintIsInferred.SetComparisonConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintIsInferred(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintIsInferred(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintIsInferred(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintIsInferred(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferredConstraints domain role code
		
		/// <summary>
		/// InferredConstraints domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferredConstraintsDomainRoleId = new global::System.Guid(0x6a7b85ba, 0xa86f, 0x416a, 0xb5, 0xb3, 0xfc, 0x8c, 0x92, 0x26, 0xd0, 0xe9);
		
		/// <summary>
		/// DomainRole InferredConstraints
		/// Description for
		/// unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred.InferredConstraints
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred/InferredConstraints.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred/InferredConstraints.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SetComparisonConstraintCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred/InferredConstraints.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6a7b85ba-a86f-416a-b5b3-fc8c9226d0e9")]
		public virtual InferredConstraints InferredConstraints
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredConstraints)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferredConstraintsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferredConstraintsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferredConstraints of a SetComparisonConstraint
		/// <summary>
		/// Gets InferredConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InferredConstraints GetInferredConstraints(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as InferredConstraints;
		}
		
		/// <summary>
		/// Sets InferredConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInferredConstraints(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint element, InferredConstraints newInferredConstraints)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newInferredConstraints);
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x8a8c4d99, 0x02f4, 0x4851, 0x90, 0xe0, 0xcc, 0x44, 0x3f, 0x8c, 0x11, 0x9b);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred/SetComparisonConstraint.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred/SetComparisonConstraint.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferredConstraints", PropertyDisplayNameKey="unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred/SetComparisonConstraint.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("8a8c4d99-02f4-4851-90e0-cc443f8c119b")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraintCollection of a InferredConstraints
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint> GetSetComparisonConstraintCollection(InferredConstraints element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint>(element, InferredConstraintsDomainRoleId);
		}
		#endregion
		#region InferredConstraints link accessor
		/// <summary>
		/// Get the list of SetComparisonConstraintIsInferred links to a InferredConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred> GetLinksToSetComparisonConstraintCollection ( global::unibz.ORMInferenceEngine.InferredConstraints inferredConstraintsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred>(inferredConstraintsInstance, global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred.InferredConstraintsDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintIsInferred link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred GetLinkToInferredConstraints (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred>(setComparisonConstraintInstance, global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintIsInferred instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintIsInferred links between a given InferredConstraints and a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred> GetLinks( global::unibz.ORMInferenceEngine.InferredConstraints source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred>(source, global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred.InferredConstraintsDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred link in links )
			{
				if ( target.Equals(link.SetComparisonConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintIsInferred link between a given InferredConstraintsand a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred GetLink( global::unibz.ORMInferenceEngine.InferredConstraints source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred>(source, global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred.InferredConstraintsDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred link in links )
			{
				if ( target.Equals(link.SetComparisonConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainRelationship SubtypeFactIsInferred
	/// Description for unibz.ORMInferenceEngine.SubtypeFactIsInferred
	/// </summary>
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.SubtypeFactIsInferred.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.SubtypeFactIsInferred.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("14ed9f6a-2dca-4255-a204-e77c52c0cae2")]
	public partial class SubtypeFactIsInferred : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubtypeFactIsInferred domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14ed9f6a, 0x2dca, 0x4255, 0xa2, 0x04, 0xe7, 0x7c, 0x52, 0xc0, 0xca, 0xe2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubtypeFactIsInferred link in the same Partition as the given InferredConstraints
		/// </summary>
		/// <param name="source">InferredConstraints to use as the source of the relationship.</param>
		/// <param name="target">InferredSubtypeFact to use as the target of the relationship.</param>
		public SubtypeFactIsInferred(InferredConstraints source, InferredSubtypeFact target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubtypeFactIsInferred.InferredConstraintsDomainRoleId, source), new DslModeling::RoleAssignment(SubtypeFactIsInferred.SubtypeFactDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubtypeFactIsInferred(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubtypeFactIsInferred(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubtypeFactIsInferred(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubtypeFactIsInferred(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InferredConstraints domain role code
		
		/// <summary>
		/// InferredConstraints domain role Id.
		/// </summary>
		public static readonly global::System.Guid InferredConstraintsDomainRoleId = new global::System.Guid(0x3bb67a2f, 0x5158, 0x4ead, 0x9d, 0x4b, 0x67, 0xe7, 0xf8, 0xfb, 0x2d, 0x24);
		
		/// <summary>
		/// DomainRole InferredConstraints
		/// Description for
		/// unibz.ORMInferenceEngine.SubtypeFactIsInferred.InferredConstraints
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.SubtypeFactIsInferred/InferredConstraints.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.SubtypeFactIsInferred/InferredConstraints.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SubtypeFactCollection", PropertyDisplayNameKey="unibz.ORMInferenceEngine.SubtypeFactIsInferred/InferredConstraints.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3bb67a2f-5158-4ead-9d4b-67e7f8fb2d24")]
		public virtual InferredConstraints InferredConstraints
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredConstraints)DslModeling::DomainRoleInfo.GetRolePlayer(this, InferredConstraintsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InferredConstraintsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InferredConstraints of a InferredSubtypeFact
		/// <summary>
		/// Gets InferredConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InferredConstraints GetInferredConstraints(InferredSubtypeFact element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubtypeFactDomainRoleId) as InferredConstraints;
		}
		
		/// <summary>
		/// Sets InferredConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInferredConstraints(InferredSubtypeFact element, InferredConstraints newInferredConstraints)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubtypeFactDomainRoleId, newInferredConstraints);
		}
		#endregion
		#region SubtypeFact domain role code
		
		/// <summary>
		/// SubtypeFact domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubtypeFactDomainRoleId = new global::System.Guid(0x5d8ad920, 0xcfa3, 0x45b4, 0xbd, 0x90, 0xa2, 0x02, 0x5a, 0xa6, 0x69, 0x39);
		
		/// <summary>
		/// DomainRole SubtypeFact
		/// Description for unibz.ORMInferenceEngine.SubtypeFactIsInferred.SubtypeFact
		/// </summary>
		[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.SubtypeFactIsInferred/SubtypeFact.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.SubtypeFactIsInferred/SubtypeFact.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InferredConstraints", PropertyDisplayNameKey="unibz.ORMInferenceEngine.SubtypeFactIsInferred/SubtypeFact.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5d8ad920-cfa3-45b4-bd90-a2025aa66939")]
		public virtual InferredSubtypeFact SubtypeFact
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InferredSubtypeFact)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubtypeFactDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubtypeFactDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubtypeFactCollection of a InferredConstraints
		/// <summary>
		/// Gets a list of SubtypeFactCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InferredSubtypeFact> GetSubtypeFactCollection(InferredConstraints element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<InferredSubtypeFact>, InferredSubtypeFact>(element, InferredConstraintsDomainRoleId);
		}
		#endregion
		#region InferredConstraints link accessor
		/// <summary>
		/// Get the list of SubtypeFactIsInferred links to a InferredConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.SubtypeFactIsInferred> GetLinksToSubtypeFactCollection ( global::unibz.ORMInferenceEngine.InferredConstraints inferredConstraintsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.SubtypeFactIsInferred>(inferredConstraintsInstance, global::unibz.ORMInferenceEngine.SubtypeFactIsInferred.InferredConstraintsDomainRoleId);
		}
		#endregion
		#region SubtypeFact link accessor
		/// <summary>
		/// Get the SubtypeFactIsInferred link to a InferredSubtypeFact.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.SubtypeFactIsInferred GetLinkToInferredConstraints (global::unibz.ORMInferenceEngine.InferredSubtypeFact subtypeFactInstance)
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.SubtypeFactIsInferred> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.SubtypeFactIsInferred>(subtypeFactInstance, global::unibz.ORMInferenceEngine.SubtypeFactIsInferred.SubtypeFactDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SubtypeFact not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubtypeFactIsInferred instance accessors
		
		/// <summary>
		/// Get any SubtypeFactIsInferred links between a given InferredConstraints and a InferredSubtypeFact.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::unibz.ORMInferenceEngine.SubtypeFactIsInferred> GetLinks( global::unibz.ORMInferenceEngine.InferredConstraints source, global::unibz.ORMInferenceEngine.InferredSubtypeFact target )
		{
			global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.SubtypeFactIsInferred> outLinks = new global::System.Collections.Generic.List<global::unibz.ORMInferenceEngine.SubtypeFactIsInferred>();
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.SubtypeFactIsInferred> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.SubtypeFactIsInferred>(source, global::unibz.ORMInferenceEngine.SubtypeFactIsInferred.InferredConstraintsDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.SubtypeFactIsInferred link in links )
			{
				if ( target.Equals(link.SubtypeFact) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubtypeFactIsInferred link between a given InferredConstraintsand a InferredSubtypeFact.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::unibz.ORMInferenceEngine.SubtypeFactIsInferred GetLink( global::unibz.ORMInferenceEngine.InferredConstraints source, global::unibz.ORMInferenceEngine.InferredSubtypeFact target )
		{
			global::System.Collections.Generic.IList<global::unibz.ORMInferenceEngine.SubtypeFactIsInferred> links = DslModeling::DomainRoleInfo.GetElementLinks<global::unibz.ORMInferenceEngine.SubtypeFactIsInferred>(source, global::unibz.ORMInferenceEngine.SubtypeFactIsInferred.InferredConstraintsDomainRoleId);
			foreach ( global::unibz.ORMInferenceEngine.SubtypeFactIsInferred link in links )
			{
				if ( target.Equals(link.SubtypeFact) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
