#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
* Copyright © ORM Solutions, LLC. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace unibz.ORMInferenceEngine
{
	/// <summary>
	/// DomainModel ORMInferenceEngineDomainModel
	/// Inference Engine for ORM Model
	/// </summary>
	[ORMSolutions.ORMArchitect.Core.Load.NORMAExtensionLoadKey("ly4276soTIbFjWepNqXV+Kz83T9EDlRB8zByGpXLakP5hWEFIcWB0L6P97ZeGbgMASEKYS/e+bVpcCq0MkIExQ==")]
	[DslDesign::DisplayNameResource("unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel.DisplayName", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel.Description", typeof(global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel), "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::ORMSolutions.ORMArchitect.Framework.FrameworkDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("24fa0419-71be-41ff-ae7c-80dd60e35532")]
	public partial class ORMInferenceEngineDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// ORMInferenceEngineDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x24fa0419, 0x71be, 0x41ff, 0xae, 0x7c, 0x80, 0xdd, 0x60, 0xe3, 0x55, 0x32);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public ORMInferenceEngineDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(Hierarchy),
				typeof(UnsatisfiableDomain),
				typeof(InferenceResult),
				typeof(InferredUnsatisfiableDomain),
				typeof(InferredHierarchy),
				typeof(InferredTopObjectType),
				typeof(InferredEquivalentTopObjectType),
				typeof(InferredDisjointTopObjectType),
				typeof(InferredExhaustiveTopObjectType),
				typeof(InferredTopFactType),
				typeof(InferredEquivalentTopFactType),
				typeof(InferredDisjointTopFactType),
				typeof(InferredConstraints),
				typeof(InferredSubsetConstraint),
				typeof(InferredEqualityConstraint),
				typeof(InferredExclusionConstraint),
				typeof(InferredSubtypeFact),
				typeof(InferredMandatoryConstraint),
				typeof(InferredFrequencyConstraint),
				typeof(InferredUniquenessConstraint),
				typeof(UnsatisfiableDomainIsForORMModel),
				typeof(InferredUnsatisfiableDomainIsForORMModel),
				typeof(UnsatisfiableObjectType),
				typeof(UnsatisfiableFactType),
				typeof(HierarchyIsForORMModel),
				typeof(InferredHierarchyIsForORMModel),
				typeof(TopLevelObjectType),
				typeof(ObjectTypeContainment),
				typeof(EquivalentTopLevelObjectType),
				typeof(EquivalentObjectTypeContainment),
				typeof(DisjointTopLevelObjectType),
				typeof(DisjointObjectTypeContainment),
				typeof(ExhaustiveTopLevelObjectType),
				typeof(ExhaustiveObjectTypeContainment),
				typeof(TopLevelFactType),
				typeof(FactTypeContainment),
				typeof(EquivalentTopLevelFactType),
				typeof(EquivalentFactTypeContainment),
				typeof(DisjointTopLevelFactType),
				typeof(DisjointFactTypeContainment),
				typeof(InferenceResultTargetsORMModel),
				typeof(InferredConstraintsTargetORMModel),
				typeof(SetConstraintIsInferred),
				typeof(SetComparisonConstraintIsInferred),
				typeof(SubtypeFactIsInferred),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(InferenceResult), "IsProcessed", InferenceResult.IsProcessedDomainPropertyId, typeof(InferenceResult.IsProcessedPropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(UnsatisfiableDomainIsForORMModel), "UnsatisfiableDomain", UnsatisfiableDomainIsForORMModel.UnsatisfiableDomainDomainRoleId),
				new DomainRolePlayerInfo(typeof(UnsatisfiableDomainIsForORMModel), "ORMModel", UnsatisfiableDomainIsForORMModel.ORMModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(InferredUnsatisfiableDomainIsForORMModel), "InferredUnsatisfiableDomain", InferredUnsatisfiableDomainIsForORMModel.InferredUnsatisfiableDomainDomainRoleId),
				new DomainRolePlayerInfo(typeof(InferredUnsatisfiableDomainIsForORMModel), "ORMModel", InferredUnsatisfiableDomainIsForORMModel.ORMModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(UnsatisfiableObjectType), "InferredUnsatisfiableDomain", UnsatisfiableObjectType.InferredUnsatisfiableDomainDomainRoleId),
				new DomainRolePlayerInfo(typeof(UnsatisfiableObjectType), "ObjectType", UnsatisfiableObjectType.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(UnsatisfiableFactType), "InferredUnsatisfiableDomain", UnsatisfiableFactType.InferredUnsatisfiableDomainDomainRoleId),
				new DomainRolePlayerInfo(typeof(UnsatisfiableFactType), "FactType", UnsatisfiableFactType.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(HierarchyIsForORMModel), "Hierarchy", HierarchyIsForORMModel.HierarchyDomainRoleId),
				new DomainRolePlayerInfo(typeof(HierarchyIsForORMModel), "ORMModel", HierarchyIsForORMModel.ORMModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(InferredHierarchyIsForORMModel), "InferredHierarchy", InferredHierarchyIsForORMModel.InferredHierarchyDomainRoleId),
				new DomainRolePlayerInfo(typeof(InferredHierarchyIsForORMModel), "ORMModel", InferredHierarchyIsForORMModel.ORMModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(TopLevelObjectType), "InferredHierarchy", TopLevelObjectType.InferredHierarchyDomainRoleId),
				new DomainRolePlayerInfo(typeof(TopLevelObjectType), "ObjectType", TopLevelObjectType.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeContainment), "Parent", ObjectTypeContainment.ParentDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeContainment), "Child", ObjectTypeContainment.ChildDomainRoleId),
				new DomainRolePlayerInfo(typeof(EquivalentTopLevelObjectType), "InferredHierarchy", EquivalentTopLevelObjectType.InferredHierarchyDomainRoleId),
				new DomainRolePlayerInfo(typeof(EquivalentTopLevelObjectType), "ObjectType", EquivalentTopLevelObjectType.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(EquivalentObjectTypeContainment), "Parent", EquivalentObjectTypeContainment.ParentDomainRoleId),
				new DomainRolePlayerInfo(typeof(EquivalentObjectTypeContainment), "Child", EquivalentObjectTypeContainment.ChildDomainRoleId),
				new DomainRolePlayerInfo(typeof(DisjointTopLevelObjectType), "InferredHierarchy", DisjointTopLevelObjectType.InferredHierarchyDomainRoleId),
				new DomainRolePlayerInfo(typeof(DisjointTopLevelObjectType), "ObjectType", DisjointTopLevelObjectType.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(DisjointObjectTypeContainment), "Parent", DisjointObjectTypeContainment.ParentDomainRoleId),
				new DomainRolePlayerInfo(typeof(DisjointObjectTypeContainment), "Child", DisjointObjectTypeContainment.ChildDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExhaustiveTopLevelObjectType), "InferredHierarchy", ExhaustiveTopLevelObjectType.InferredHierarchyDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExhaustiveTopLevelObjectType), "ObjectType", ExhaustiveTopLevelObjectType.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExhaustiveObjectTypeContainment), "Parent", ExhaustiveObjectTypeContainment.ParentDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExhaustiveObjectTypeContainment), "Child", ExhaustiveObjectTypeContainment.ChildDomainRoleId),
				new DomainRolePlayerInfo(typeof(TopLevelFactType), "InferredHierarchy", TopLevelFactType.InferredHierarchyDomainRoleId),
				new DomainRolePlayerInfo(typeof(TopLevelFactType), "FactType", TopLevelFactType.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeContainment), "Parent", FactTypeContainment.ParentDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeContainment), "Child", FactTypeContainment.ChildDomainRoleId),
				new DomainRolePlayerInfo(typeof(EquivalentTopLevelFactType), "InferredHierarchy", EquivalentTopLevelFactType.InferredHierarchyDomainRoleId),
				new DomainRolePlayerInfo(typeof(EquivalentTopLevelFactType), "FactType", EquivalentTopLevelFactType.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(EquivalentFactTypeContainment), "Parent", EquivalentFactTypeContainment.ParentDomainRoleId),
				new DomainRolePlayerInfo(typeof(EquivalentFactTypeContainment), "Child", EquivalentFactTypeContainment.ChildDomainRoleId),
				new DomainRolePlayerInfo(typeof(DisjointTopLevelFactType), "InferredHierarchy", DisjointTopLevelFactType.InferredHierarchyDomainRoleId),
				new DomainRolePlayerInfo(typeof(DisjointTopLevelFactType), "FactType", DisjointTopLevelFactType.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(DisjointFactTypeContainment), "Parent", DisjointFactTypeContainment.ParentDomainRoleId),
				new DomainRolePlayerInfo(typeof(DisjointFactTypeContainment), "Child", DisjointFactTypeContainment.ChildDomainRoleId),
				new DomainRolePlayerInfo(typeof(InferenceResultTargetsORMModel), "InferenceResult", InferenceResultTargetsORMModel.InferenceResultDomainRoleId),
				new DomainRolePlayerInfo(typeof(InferenceResultTargetsORMModel), "ORMModel", InferenceResultTargetsORMModel.ORMModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(InferredConstraintsTargetORMModel), "InferredConstraints", InferredConstraintsTargetORMModel.InferredConstraintsDomainRoleId),
				new DomainRolePlayerInfo(typeof(InferredConstraintsTargetORMModel), "ORMModel", InferredConstraintsTargetORMModel.ORMModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintIsInferred), "InferredConstraints", SetConstraintIsInferred.InferredConstraintsDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintIsInferred), "SetConstraint", SetConstraintIsInferred.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintIsInferred), "InferredConstraints", SetComparisonConstraintIsInferred.InferredConstraintsDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintIsInferred), "SetComparisonConstraint", SetComparisonConstraintIsInferred.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubtypeFactIsInferred), "InferredConstraints", SubtypeFactIsInferred.InferredConstraintsDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubtypeFactIsInferred), "SubtypeFact", SubtypeFactIsInferred.SubtypeFactDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(20);
				createElementMap.Add(typeof(Hierarchy), 0);
				createElementMap.Add(typeof(UnsatisfiableDomain), 1);
				createElementMap.Add(typeof(InferenceResult), 2);
				createElementMap.Add(typeof(InferredUnsatisfiableDomain), 3);
				createElementMap.Add(typeof(InferredHierarchy), 4);
				createElementMap.Add(typeof(InferredTopObjectType), 5);
				createElementMap.Add(typeof(InferredEquivalentTopObjectType), 6);
				createElementMap.Add(typeof(InferredDisjointTopObjectType), 7);
				createElementMap.Add(typeof(InferredExhaustiveTopObjectType), 8);
				createElementMap.Add(typeof(InferredTopFactType), 9);
				createElementMap.Add(typeof(InferredEquivalentTopFactType), 10);
				createElementMap.Add(typeof(InferredDisjointTopFactType), 11);
				createElementMap.Add(typeof(InferredConstraints), 12);
				createElementMap.Add(typeof(InferredSubsetConstraint), 13);
				createElementMap.Add(typeof(InferredEqualityConstraint), 14);
				createElementMap.Add(typeof(InferredExclusionConstraint), 15);
				createElementMap.Add(typeof(InferredSubtypeFact), 16);
				createElementMap.Add(typeof(InferredMandatoryConstraint), 17);
				createElementMap.Add(typeof(InferredFrequencyConstraint), 18);
				createElementMap.Add(typeof(InferredUniquenessConstraint), 19);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new Hierarchy(partition, propertyAssignments);
				case 1: return new UnsatisfiableDomain(partition, propertyAssignments);
				case 2: return new InferenceResult(partition, propertyAssignments);
				case 3: return new InferredUnsatisfiableDomain(partition, propertyAssignments);
				case 4: return new InferredHierarchy(partition, propertyAssignments);
				case 5: return new InferredTopObjectType(partition, propertyAssignments);
				case 6: return new InferredEquivalentTopObjectType(partition, propertyAssignments);
				case 7: return new InferredDisjointTopObjectType(partition, propertyAssignments);
				case 8: return new InferredExhaustiveTopObjectType(partition, propertyAssignments);
				case 9: return new InferredTopFactType(partition, propertyAssignments);
				case 10: return new InferredEquivalentTopFactType(partition, propertyAssignments);
				case 11: return new InferredDisjointTopFactType(partition, propertyAssignments);
				case 12: return new InferredConstraints(partition, propertyAssignments);
				case 13: return new InferredSubsetConstraint(partition, propertyAssignments);
				case 14: return new InferredEqualityConstraint(partition, propertyAssignments);
				case 15: return new InferredExclusionConstraint(partition, propertyAssignments);
				case 16: return new InferredSubtypeFact(partition, propertyAssignments);
				case 17: return new InferredMandatoryConstraint(partition, propertyAssignments);
				case 18: return new InferredFrequencyConstraint(partition, propertyAssignments);
				case 19: return new InferredUniquenessConstraint(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(25);
				createElementLinkMap.Add(typeof(UnsatisfiableDomainIsForORMModel), 0);
				createElementLinkMap.Add(typeof(InferredUnsatisfiableDomainIsForORMModel), 1);
				createElementLinkMap.Add(typeof(UnsatisfiableObjectType), 2);
				createElementLinkMap.Add(typeof(UnsatisfiableFactType), 3);
				createElementLinkMap.Add(typeof(HierarchyIsForORMModel), 4);
				createElementLinkMap.Add(typeof(InferredHierarchyIsForORMModel), 5);
				createElementLinkMap.Add(typeof(TopLevelObjectType), 6);
				createElementLinkMap.Add(typeof(ObjectTypeContainment), 7);
				createElementLinkMap.Add(typeof(EquivalentTopLevelObjectType), 8);
				createElementLinkMap.Add(typeof(EquivalentObjectTypeContainment), 9);
				createElementLinkMap.Add(typeof(DisjointTopLevelObjectType), 10);
				createElementLinkMap.Add(typeof(DisjointObjectTypeContainment), 11);
				createElementLinkMap.Add(typeof(ExhaustiveTopLevelObjectType), 12);
				createElementLinkMap.Add(typeof(ExhaustiveObjectTypeContainment), 13);
				createElementLinkMap.Add(typeof(TopLevelFactType), 14);
				createElementLinkMap.Add(typeof(FactTypeContainment), 15);
				createElementLinkMap.Add(typeof(EquivalentTopLevelFactType), 16);
				createElementLinkMap.Add(typeof(EquivalentFactTypeContainment), 17);
				createElementLinkMap.Add(typeof(DisjointTopLevelFactType), 18);
				createElementLinkMap.Add(typeof(DisjointFactTypeContainment), 19);
				createElementLinkMap.Add(typeof(InferenceResultTargetsORMModel), 20);
				createElementLinkMap.Add(typeof(InferredConstraintsTargetORMModel), 21);
				createElementLinkMap.Add(typeof(SetConstraintIsInferred), 22);
				createElementLinkMap.Add(typeof(SetComparisonConstraintIsInferred), 23);
				createElementLinkMap.Add(typeof(SubtypeFactIsInferred), 24);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::unibz.ORMInferenceEngine.ORMInferenceEngineDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new UnsatisfiableDomainIsForORMModel(partition, roleAssignments, propertyAssignments);
				case 1: return new InferredUnsatisfiableDomainIsForORMModel(partition, roleAssignments, propertyAssignments);
				case 2: return new UnsatisfiableObjectType(partition, roleAssignments, propertyAssignments);
				case 3: return new UnsatisfiableFactType(partition, roleAssignments, propertyAssignments);
				case 4: return new HierarchyIsForORMModel(partition, roleAssignments, propertyAssignments);
				case 5: return new InferredHierarchyIsForORMModel(partition, roleAssignments, propertyAssignments);
				case 6: return new TopLevelObjectType(partition, roleAssignments, propertyAssignments);
				case 7: return new ObjectTypeContainment(partition, roleAssignments, propertyAssignments);
				case 8: return new EquivalentTopLevelObjectType(partition, roleAssignments, propertyAssignments);
				case 9: return new EquivalentObjectTypeContainment(partition, roleAssignments, propertyAssignments);
				case 10: return new DisjointTopLevelObjectType(partition, roleAssignments, propertyAssignments);
				case 11: return new DisjointObjectTypeContainment(partition, roleAssignments, propertyAssignments);
				case 12: return new ExhaustiveTopLevelObjectType(partition, roleAssignments, propertyAssignments);
				case 13: return new ExhaustiveObjectTypeContainment(partition, roleAssignments, propertyAssignments);
				case 14: return new TopLevelFactType(partition, roleAssignments, propertyAssignments);
				case 15: return new FactTypeContainment(partition, roleAssignments, propertyAssignments);
				case 16: return new EquivalentTopLevelFactType(partition, roleAssignments, propertyAssignments);
				case 17: return new EquivalentFactTypeContainment(partition, roleAssignments, propertyAssignments);
				case 18: return new DisjointTopLevelFactType(partition, roleAssignments, propertyAssignments);
				case 19: return new DisjointFactTypeContainment(partition, roleAssignments, propertyAssignments);
				case 20: return new InferenceResultTargetsORMModel(partition, roleAssignments, propertyAssignments);
				case 21: return new InferredConstraintsTargetORMModel(partition, roleAssignments, propertyAssignments);
				case 22: return new SetConstraintIsInferred(partition, roleAssignments, propertyAssignments);
				case 23: return new SetComparisonConstraintIsInferred(partition, roleAssignments, propertyAssignments);
				case 24: return new SubtypeFactIsInferred(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "unibz.ORMInferenceEngine.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ORMInferenceEngineDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (ORMInferenceEngineDomainModel.resourceManager == null)
				{
					ORMInferenceEngineDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(ORMInferenceEngineDomainModel).Assembly);
				}
				return ORMInferenceEngineDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return ORMInferenceEngineDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return ORMInferenceEngineDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (ORMInferenceEngineDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new ORMInferenceEngineCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					
					ORMInferenceEngineDomainModel.copyClosure = copyFilter;
				}
				return ORMInferenceEngineDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (ORMInferenceEngineDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new ORMInferenceEngineDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
		
					ORMInferenceEngineDomainModel.removeClosure = removeFilter;
				}
				return ORMInferenceEngineDomainModel.removeClosure;
			}
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ORMInferenceEngineDeleteClosure : ORMInferenceEngineDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMInferenceEngineDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ORMInferenceEngineDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMInferenceEngineDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::unibz.ORMInferenceEngine.UnsatisfiableDomainIsForORMModel.UnsatisfiableDomainDomainRoleId, true);
			DomainRoles.Add(global::unibz.ORMInferenceEngine.InferredUnsatisfiableDomainIsForORMModel.InferredUnsatisfiableDomainDomainRoleId, true);
			DomainRoles.Add(global::unibz.ORMInferenceEngine.HierarchyIsForORMModel.HierarchyDomainRoleId, true);
			DomainRoles.Add(global::unibz.ORMInferenceEngine.InferredHierarchyIsForORMModel.InferredHierarchyDomainRoleId, true);
			DomainRoles.Add(global::unibz.ORMInferenceEngine.InferenceResultTargetsORMModel.InferenceResultDomainRoleId, true);
			DomainRoles.Add(global::unibz.ORMInferenceEngine.InferredConstraintsTargetORMModel.InferredConstraintsDomainRoleId, true);
			DomainRoles.Add(global::unibz.ORMInferenceEngine.SetConstraintIsInferred.SetConstraintDomainRoleId, true);
			DomainRoles.Add(global::unibz.ORMInferenceEngine.SetComparisonConstraintIsInferred.SetComparisonConstraintDomainRoleId, true);
			DomainRoles.Add(global::unibz.ORMInferenceEngine.SubtypeFactIsInferred.SubtypeFactDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ORMInferenceEngineCopyClosure : ORMInferenceEngineCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMInferenceEngineCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ORMInferenceEngineCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMInferenceEngineCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}

