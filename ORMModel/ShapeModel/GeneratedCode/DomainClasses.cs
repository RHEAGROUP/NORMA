#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © ORM Solutions, LLC. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ORMSolutions.ORMArchitect.Core.ShapeModel
{
	/// <summary>
	/// DomainClass ORMDiagramDisplayOptions
	/// Global display options for shapes on an ORM diagram
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ShapeModel.ORMDiagramDisplayOptions.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ShapeModel.ORMShapeDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.ShapeDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ShapeModel.ORMDiagramDisplayOptions.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ShapeModel.ORMShapeDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.ShapeDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9cc147ee-d2a6-458c-a373-8d95cc29d144")]
	public partial class ORMDiagramDisplayOptions : global::ORMSolutions.ORMArchitect.Core.ObjectModel.DisplaySetting
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ORMDiagramDisplayOptions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9cc147ee, 0xd2a6, 0x458c, 0xa3, 0x73, 0x8d, 0x95, 0xcc, 0x29, 0xd1, 0x44);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ORMDiagramDisplayOptions(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ORMDiagramDisplayOptions(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DisplayRoleNames domain property code
		
		/// <summary>
		/// DisplayRoleNames domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisplayRoleNamesDomainPropertyId = new global::System.Guid(0xba6a4a9b, 0xde6b, 0x4191, 0xa8, 0x10, 0x4d, 0x66, 0x36, 0x07, 0x9f, 0x17);
		
		/// <summary>
		/// Storage for DisplayRoleNames
		/// </summary>
		private RoleNameDisplay displayRoleNamesPropertyStorage = ORMSolutions.ORMArchitect.Core.ShapeModel.RoleNameDisplay.On;
		
		/// <summary>
		/// Gets or sets the value of DisplayRoleNames domain property.
		/// Should role names be shown by default on ORM diagrams?
		/// </summary>
		[ORMDiagramDisplayOption(true)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ShapeModel.ORMDiagramDisplayOptions/DisplayRoleNames.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ShapeModel.ORMShapeDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.ShapeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ShapeModel.ORMDiagramDisplayOptions/DisplayRoleNames.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ShapeModel.ORMShapeDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.ShapeDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ORMSolutions.ORMArchitect.Core.ShapeModel.RoleNameDisplay.On)]
		[DslModeling::DomainObjectId("ba6a4a9b-de6b-4191-a810-4d6636079f17")]
		public RoleNameDisplay DisplayRoleNames
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return displayRoleNamesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DisplayRoleNamesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ORMDiagramDisplayOptions.DisplayRoleNames domain property.
		/// </summary>
		internal sealed partial class DisplayRoleNamesPropertyHandler : DslModeling::DomainPropertyValueHandler<ORMDiagramDisplayOptions, RoleNameDisplay>
		{
			private DisplayRoleNamesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ORMDiagramDisplayOptions.DisplayRoleNames domain property value handler.
			/// </summary>
			public static readonly DisplayRoleNamesPropertyHandler Instance = new DisplayRoleNamesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ORMDiagramDisplayOptions.DisplayRoleNames domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisplayRoleNamesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed RoleNameDisplay GetValue(ORMDiagramDisplayOptions element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.displayRoleNamesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ORMDiagramDisplayOptions element, RoleNameDisplay newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				RoleNameDisplay oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.displayRoleNamesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DisplayReverseReadings domain property code
		
		/// <summary>
		/// DisplayReverseReadings domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisplayReverseReadingsDomainPropertyId = new global::System.Guid(0xaf309cea, 0xa9f5, 0x4da4, 0xbb, 0x75, 0xce, 0x1b, 0x74, 0xe5, 0x37, 0x16);
		
		/// <summary>
		/// Storage for DisplayReverseReadings
		/// </summary>
		private BinaryFactTypeReadingDisplay displayReverseReadingsPropertyStorage = ORMSolutions.ORMArchitect.Core.ShapeModel.BinaryFactTypeReadingDisplay.ShowReverseReading;
		
		/// <summary>
		/// Gets or sets the value of DisplayReverseReadings domain property.
		/// Should reverse readings be shown by default on an ORM diagram?
		/// </summary>
		[ORMDiagramDisplayOption(true)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ShapeModel.ORMDiagramDisplayOptions/DisplayReverseReadings.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ShapeModel.ORMShapeDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.ShapeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ShapeModel.ORMDiagramDisplayOptions/DisplayReverseReadings.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ShapeModel.ORMShapeDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.ShapeDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ORMSolutions.ORMArchitect.Core.ShapeModel.BinaryFactTypeReadingDisplay.ShowReverseReading)]
		[DslModeling::DomainObjectId("af309cea-a9f5-4da4-bb75-ce1b74e53716")]
		public BinaryFactTypeReadingDisplay DisplayReverseReadings
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return displayReverseReadingsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DisplayReverseReadingsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ORMDiagramDisplayOptions.DisplayReverseReadings domain property.
		/// </summary>
		internal sealed partial class DisplayReverseReadingsPropertyHandler : DslModeling::DomainPropertyValueHandler<ORMDiagramDisplayOptions, BinaryFactTypeReadingDisplay>
		{
			private DisplayReverseReadingsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ORMDiagramDisplayOptions.DisplayReverseReadings domain property value handler.
			/// </summary>
			public static readonly DisplayReverseReadingsPropertyHandler Instance = new DisplayReverseReadingsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ORMDiagramDisplayOptions.DisplayReverseReadings domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisplayReverseReadingsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed BinaryFactTypeReadingDisplay GetValue(ORMDiagramDisplayOptions element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.displayReverseReadingsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ORMDiagramDisplayOptions element, BinaryFactTypeReadingDisplay newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				BinaryFactTypeReadingDisplay oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.displayReverseReadingsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DisplayReadingDirection domain property code
		
		/// <summary>
		/// DisplayReadingDirection domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisplayReadingDirectionDomainPropertyId = new global::System.Guid(0x996352c4, 0x5254, 0x42d4, 0x9c, 0xb8, 0x3a, 0x72, 0x00, 0xd8, 0x04, 0x64);
		
		/// <summary>
		/// Storage for DisplayReadingDirection
		/// </summary>
		private ReadingDirectionIndicatorDisplay displayReadingDirectionPropertyStorage = DslModeling::SerializationUtilities.GetValue<ReadingDirectionIndicatorDisplay>("Reversed");
		
		/// <summary>
		/// Gets or sets the value of DisplayReadingDirection domain property.
		/// When should reading direction be shown with a graphical indicator on an ORM
		/// diagram?
		/// </summary>
		[ORMDiagramDisplayOption(true)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ShapeModel.ORMDiagramDisplayOptions/DisplayReadingDirection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ShapeModel.ORMShapeDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.ShapeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ShapeModel.ORMDiagramDisplayOptions/DisplayReadingDirection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ShapeModel.ORMShapeDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.ShapeDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(typeof(global::ORMSolutions.ORMArchitect.Core.ShapeModel.ReadingDirectionIndicatorDisplay), "Reversed")]
		[DslModeling::DomainObjectId("996352c4-5254-42d4-9cb8-3a7200d80464")]
		public ReadingDirectionIndicatorDisplay DisplayReadingDirection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return displayReadingDirectionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DisplayReadingDirectionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ORMDiagramDisplayOptions.DisplayReadingDirection domain property.
		/// </summary>
		internal sealed partial class DisplayReadingDirectionPropertyHandler : DslModeling::DomainPropertyValueHandler<ORMDiagramDisplayOptions, ReadingDirectionIndicatorDisplay>
		{
			private DisplayReadingDirectionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ORMDiagramDisplayOptions.DisplayReadingDirection domain property value handler.
			/// </summary>
			public static readonly DisplayReadingDirectionPropertyHandler Instance = new DisplayReadingDirectionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ORMDiagramDisplayOptions.DisplayReadingDirection domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisplayReadingDirectionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ReadingDirectionIndicatorDisplay GetValue(ORMDiagramDisplayOptions element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.displayReadingDirectionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ORMDiagramDisplayOptions element, ReadingDirectionIndicatorDisplay newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ReadingDirectionIndicatorDisplay oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.displayReadingDirectionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
